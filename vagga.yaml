# Vagga script to build latest GIMP (2.99)

# Requirements of the host machine:
# vagga installed (see web)
# uidmap installed
#     >sudo apt-get install uidmap

# a chain of containers, to minimize rebuilding as changes are made.
# Each container depends on previous as specified by "!Container foo"

# Goal or current design of this script:
# 1) use latest packaged dependencies (e.g. glib) from the distribution of the container
# 2) build artifacts: babl, gegl, gimp
# 3) install build artifacts in the usual place (don't worry about polluting the container)
#    i.e. not define any special GIMP_PREFIX


containers:

  # basic OS with dev (compiling)
  baseOS:
    setup:
    # 18.10
    # - !Ubuntu cosmic
    # 19.04
    # - !Ubuntu disco
    # ubuntu 19.10, which has meson 51
    - !Ubuntu eoan
    # 20.4 LTS
    #- !Ubuntu fossa

    # enable universe repository (where gimp lives)
    - !UbuntuUniverse
    # tools for dev (C compiler)
    - !Install [build-essential]




  # with required build tools
  baseWithTools:
    setup:
    - !Container baseOS

    # meson is a python3 app

    # GIMP build needs setuptools
    - !Install [python3-setuptools]

    # Install packaged version.
    # Which might be too old.
    - !Install [meson]

    # Alternatively, get latest using pip
    #- !Sh pip3 install meson

    # meson and autotools use pkg-config
    - !Install [pkg-config]

    # meson.build calls git
    - !Install [git]

    # build uses gobject introspection tools
    - !Install [gobject-introspection]

    # more tools
    - !Install [ xsltproc]

    # tool to build API docs
    - !Install [gtk-doc-tools]

    # specific to autotools build
    - !Install [libtool]

    # in8n internationalization
    - !Install [intltool]

    # build scripts call git and test to establish version
    - !Sh which git
    - !Sh which test



  # with required libraries
  generalDeps:
    setup:
    - !Container baseWithTools

    # babl, gegl, GIMP uses glib group of libraries
    # package comprises glib, gobject, and gio
    - !Install [glib2.0]

    # the builds deposit introspection data
    # If omit, get can't find ...gir... when building gegl
    - !Install [libgirepository1.0-dev]

    # babl specific

    # links against lcms2 (lite color mgt system) library, need the dev flavor
    - !Install [liblcms2-dev]

    # gegl specific

    # depends on babl (which we build), and these libraries from packages
    - !Install [libjson-glib-dev]

    # gimp specific





  # with more required libraries.
  # Gimp requires
  # !!! Some dependency is through gegl, must be here when gegl built
  # these are package names, might depend on distribution
  gimpDeps:
    setup:
    - !Container generalDeps

    # Somewhat in reverse order of complain by build

    # plugin interpreters
    # Python3 PyGObject.  See earlier, installed Python3
    - !Install [ python3-gi]
    # lua
    - !Install [ luajit]
    - !Install [ lua-lgi ]
    # javascript
    - !Install [ gjs]


    # plugins, mainly file format plugins?
    # JPEG format
    - !Install [ libjpeg-dev]
    # TIFF format
    - !Install [ libtiff-dev]
    # PDF format
    - !Install [ libpoppler-glib-dev]
    - !Install [ poppler-data]

    # file compressors
    - !Install [ liblzma-dev]
    - !Install [ libbz2-dev]

    # ???
    - !Install [ libxmu-dev]
    - !Install [ libappstream-glib-dev]
    - !Install [ librsvg2-dev]

    # mypaint
    - !Install [ mypaint-brushes]
    - !Install [ libmypaint-dev]

    # accessibility toolkit
    - !Install [ libatk1.0-dev]

    #image metadata
    - !Install [ libgexiv2-dev]

    # graphics toolkit: GTK and GDK
    - !Install [ libgtk-3-dev]
    # gtk-encode-symbolic-svg
    - !Install [ gtk-3-examples]
    # ?
    - !Install [ libgdk-pixbuf2.0-dev]

    # renderers
    - !Install [ libpango1.0-dev]
    - !Install [ libcairo2-dev]

    # optional but suppress warnings
    - !Install [ libcanberra-gtk3-module ]

    # optional for browsing API docs
    - !Install [ yelp ]

    environ:
      HOME: /work/.home



  # with babl, gegl source
  # gimp requires latest babl, gegl, so we build instead of install
  # These are relatively stable compared to gimp source
  gimpDepsSource:
    setup:
    - !Container gimpDeps

    - !Sh rm /etc/resolv.conf


    # This causes build to fail, can't find git_version.h because this gets only the files, not .git
    #- !Git
    #  url: https://gitlab.gnome.org/GNOME/babl.git
    #  path: /home/babl

    # OR use git to clone the repository
    #- !Sh |
    #   git clone https://gitlab.gnome.org/GNOME/babl.git /home/babl

    # OR most most recent release archive
    # 1.72=>1.74
    - !Tar
      url: https://download.gimp.org/pub/babl/0.1/babl-0.1.74.tar.xz
      path: /home




    # Gimp depends on gegl 4.23 which is not released
    #- !Tar
    #  url: https://download.gimp.org/pub/gegl/0.4/gegl-0.4.18.tar.xz
    #  path: /home

    # latest, bleeding, from shared, bare repository
    - !Git
      url: https://gitlab.gnome.org/GNOME/gegl.git
      path: /home/gegl




  # With built babl, gegl
  bablGeglDev:
    setup:
    - !Container gimpDepsSource

    # Build (from source) certain prereqs of gimp: babl, gegl

    # We don't do this.  Instead we install to default place.
    # set prefix: directory where GIMP build scripts will install stuff
    #- !Env
    #  GIMP_PREFIX: /home

    # If Debian, need the architecture label
    # TODO not working, see below, hardcoded
    - !Sh echo "Determine architecture"
    - !Sh dpkg-architecture -qDEB_HOST_MULTIARCH 2> /dev/null
    - !Env
      MY_ARCH: dpkg-architecture -qDEB_HOST_MULTIARCH 2> /dev/null
    - !Sh echo $MY_ARCH

    # Used by GIMP build to detect the build dependencies
    # E.G. gegl depends on babl installed and uses pkgconfig to find it
    # This has Debian path prepended
    # TODO "${GIMP_PREFIX}/lib/${MY_ARCH}/pkgconfig:${GIMP_PREFIX}/lib/pkgconfig:${GIMP_PREFIX}/share/pkgconfig"
    #- !Env
    #  PKG_CONFIG_PATH: "/home/lib/x86_64-linux-gnu/pkgconfig:/home/lib/pkgconfig:/home/share/pkgconfig"
    - !Sh echo $PKG_CONFIG_PATH


    # Note babl and gegl build the same
    # WAS: cd /home/babl-0.1.74

    - !Sh |
        cd /home/babl-0.1.74
        meson _build \
         --buildtype=release \
          -Db_lto=true
        cd _build
        ninja
        ninja install

    # Partial check of installed artifacts, installed in default location
    #- !Sh test -d /usr/local/share/gir-1.0/babl/Babl-0.1.gir


    # build gegl

    # When it builds, it lists options that will be built, according to installed libraries it finds
    # e.g. won't build umfpack if libumfpack5 is not installed
    # Then at GIMP runtime, it may complain of missing GEGL ops

    # Used to find the glib-introspection dependencies.
    # gegl builds its introspection data.
    # To do so, it must find Babl-0.1.gir
    # was  XDG_DATA_DIRS: "/home/share:/usr/share:$XDG_DATA_DIRS"

    - !Env
      XDG_DATA_DIRS: "/usr/local/share"

    - !Sh echo ">>>>>>  XDG_DATA_DIRS"
    - !Sh echo $XDG_DATA_DIRS
    - !Sh echo ">>>>>>"

    # !!! Not using     --prefix=${GIMP_PREFIX} \
    # WAS  cd /home/gegl-0.4.18
    - !Sh |
        cd /home/gegl
        meson _build \
         --buildtype=release \
          -Db_lto=true
        cd _build
        ninja
        ninja install

    # remove DNS file that vagga will recreate after build
    - !Sh "rm /etc/resolv.conf"

    # Show that it installed .so
    - !Sh ls /usr/local/lib/x86_64-linux-gnu



  # !!! Note the containers branch here.
  # Later, choose one of these on which to build gimpLocal



  # With gimp source and built gimp
  # Uses automake variant of build system for Gimp
  gimpAMDev:
    setup:
    - !Container bablGeglDev

    # rebuild container when changed: local clone of gimp repository (in /work i.e. project directory )
    - !Depends gimp

    # Get Gimp sources

    # latest, bleeding
    #- !Git
    #  url: https://gitlab.gnome.org/GNOME/gimp.git
    #  path: /home/gimp

    # copy files from my hacked git repo into the container
    # note /work/gimp is in the containing, project directory
    # First remove it in case meson build futzed with it???

    - !Copy
      source: /work/gimp
      path:  /home/gimp

    # Options
    # See INSTALL or INSTALL.in file in repository.  Seems definitive

    # list the options
    #- !Sh |
    #   cd /home/gimp
    #   ./configure --help

    - !Env LD_LIBRARY_PATH: "/usr/local/lib/x86_64-linux-gnu:/usr/lib"
    - !Env XDG_DATA_DIRS: "/usr/local/share:/usr/share"

    # echo environment
    - !Sh echo "home ->"  $HOME
    - !Sh echo "library path ->"  $LD_LIBRARY_PATH
    - !Sh echo "introspection path ->"  $XDG_DATA_DIRS
    - !Sh echo "binary path ->" $PATH

    # require libtool now (for autotools build

    # My customization of the bare commands
    # disabling docs, python, vector-icons
    # --jobs=4 or -j4
    # ??? make distclean to alleviate "unrecognized file format"
    # --disable-python ?? what does that prevent? PyGimp, or build Python interpreter, or install Python plugins
    # --disable-docs ?? user manual?
    # --disable-gtk-doc ?? programmers reference manual (libgimp API and PDB?)

    # --disable-vector-icons was working until Jan. 12

    # build
    - !Sh |
        cd /home/gimp
        ./autogen.sh --disable-docs  --enable-debug
        ./configure --help
        make -j4
        make install

    # rm the old pygimp that the gimp build still installs
    # Gimp will put it in the PYTHONPATH, we don't want to find its contents
    # EmptyDir is not correct, it keeps the directory empty is all child containers
    # - !EmptyDir /usr/local/lib/gimp/2.99/python
    - !Sh "rm -rf /usr/local/lib/gimp/2.99/python/*"

    # remove DNS file that vagga will recreate after build
    - !Sh "rm /etc/resolv.conf"

    #
    environ:
      LD_LIBRARY_PATH: "/usr/local/lib/x86_64-linux-gnu:/usr/lib"
      XDG_DATA_DIRS: "/usr/local/share:/usr/share"
      PATH: "/usr/local/bin:/usr/bin:/bin"



  # build gimp using meson
  # Not used because it doesn't build gimpfu anyway?
  # Can't remember why I don't use this
  gimpMesonDev:
    setup:
    - !Container bablGeglDev

    - !Copy
      source: /work/gimp
      path:  /home/gimp

    # resolve FAILED: cursors/gimp-tool-cursors.c   Related to vector icons?
    - !Env  XDG_DATA_DIRS: "/usr/local/share:/usr/share"

    # resolve ../plug-ins/common/file-pdf-load.c:32:10: fatal error: poppler.h: No such file or directory
    - !Env LD_LIBRARY_PATH: "/usr/local/lib/x86_64-linux-gnu:/usr/lib"
    # -Dpoppler=false => -Dpdf=false is not correct
    # -Dpoppler=false still fails to build

    # --buildtype=release \
    # currently crashes g-ir-scanner SIGILL

    # Note that meson builds out of tree, i.e. does not touch gimp directory

    # build
    - !Sh |
        cd /home/gimp
        meson _build \
         --buildtype=debug \
         -Djavascript=never \
         -Dlua=never \
         -Dpython=always \
         -Dgtk-doc=false
        cd _build
        ninja
        ninja install

    # Generate documentation for Python language bindings to Gimp, etc.
    # Same documents for GLib, GObj, Gio webbed at "PyGObject API Reference"
    - !Sh g-ir-doc-tool --language=Python -o /work/.home/gimp-doc /usr/local/share/gir-1.0/Gimp-3.0.gir
    - !Sh g-ir-doc-tool --language=Python -o /work/.home/glib-doc /usr/share/gir-1.0/GLib-2.0.gir
    - !Sh g-ir-doc-tool --language=Python -o /work/.home/gobj-doc /usr/share/gir-1.0/GObject-2.0.gir

    ## crashes: - !Sh g-ir-doc-tool --language=Python -o /work/.home/gio-doc /usr/share/gir-1.0/Gio-2.0.gir



  # With local customized GIMP
  # We install test plug-ins locally (for user).  This is common practice.
  # We install gimpfu locally (for user).  This is uncommon, eventually gimpfu installs w Gimp.

  # Faster if a command does this.  See gimpTestGUI which runs on gimpAMDev
  gimpLocal:
    setup:
    # Choice:
    #- !Container gimpAMDev
    - !Container gimpMesonDev

    # rebuild container if test plugin source (in /work i.e. project directory ) changes
    - !Depends plug-ins

    # create container user's .config for GIMP, to hold locally installed plug-ins
    - !EnsureDir /work/.home/.config/GIMP/2.99/plug-ins

    # Remove old test.py
    # - !Sh rm /work/.home/.config/GIMP/2.99/plug-ins/test/test.py

    # install test plugins from repository to container's home  (not exactly in the container?)
    # Copy to the conventional directory for local customization of  Linux apps, specically GIMP ($HOME/.config/.... etc.)
    # When GIMP starts, it will find these plugin files and execute them (to register the plug-in)
    # Plugins must be in subdirectory, and executable?
    # Can't use the originals, since they have hash bang #! python2

    - !Copy
      source: /work/plug-ins/
      path: /work/.home/.config/GIMP/2.99/plug-ins

    # make test plugins executable, Gimp requires it
    # e.g. - !Sh chmod +x /work/.home/.config/GIMP/2.99/plug-ins/test/test.py
    - !Sh find /work/.home/.config/GIMP/2.99/plug-ins -name *.py -exec chmod +x '{}' +

    # Copy hacked gimpfu sources into the install location from the project directory
    # Copy entire directory
    # Must be a Python package, directory having a ????
    # First remove the bad gimpfu.py at the top?  Build should not have installed it
    ##- !Remove /usr/local/lib/gimp/2.99/python/gimpfu.py
    - !Copy
      source: /work/gimpfu
      path:  /usr/local/lib/gimp/2.99/python
    # TODO use include-regex expression in Copy

    environ:
      HOME: /work/.home





commands:
  testOS: !Command
    description: Test sanity of OS in container baseOS
    container: baseOS
    run: |
      which which
      which pkg-config
      python -V

  testMeson: !Command
    description: Test sanity of meson in container withTools
    container: baseWithTools
    run: |
      meson -h
      which pkg-config
      which python3
      which intltool

  testSource: !Command
    description: List contents of cloned source
    container: gimpSource
    run: |
      echo "Contents of /babl"
      ls /home/babl
      which git

  testBabl: !Command
    description: Test build babl and gegl
    container: bablGeglDev
    run: |
      ls /home/babl
      ls /home/gegl

  #   cd /home/gegl-0.4.18/_build
  #    ninja test


  gimpMeson: !Command
    description: Build gimp using meson
    container: gimpMesonDev
    run: |
      export LD_LIBRARY_PATH="/usr/local/lib/x86_64-linux-gnu:/usr/local/lib:${LD_LIBRARY_PATH}"
      echo $LD_LIBRARY_PATH
      /usr/local/bin/gimp-2.99 --version


  gimpVersion: !Command
    description: Run gimp command line in gimpdev container
    container: gimpLocal
    run: |
      export LD_LIBRARY_PATH="/usr/local/lib/x86_64-linux-gnu:/usr/local/lib:${LD_LIBRARY_PATH}"
      echo $LD_LIBRARY_PATH
      /usr/local/bin/gimp-2.99 --version

  # if you have yelp installed outside the container, and pwd is vaggaGimp, just "yelp .home/gimp-doc"
  gimpBrowse: !Command
    description: Browse Gimp GI use: vagga --use-env DISPLAY gimpBrowse
    container: gimpLocal
    run: |
      yelp /work/.home/gimp-doc




  # to run this, use     vagga --use-env DISPLAY gimpRunGUI

  # export GEGL_PATH="/usr/local/bin/gegl"
  # GEGL_PATH should point to the .so parent directory
  # gegl -v

  # gimp typelib in /usr/local/lib/gi...
  # gegl, babl typelib in /usr/local/lib/x86_64-linux-gnu/gi...

  # export GI_TYPELIB_PATH=/usr/local/lib/x86_64-linux-gnu/girepository-1.0:/usr/local/lib/girepository-1.0
  # squelch warnings
  # export NO_AT_BRIDGE=1
  gimpRunGUI: !Command
    description: Run gimp GUI in gimpLocal container
    container: gimpLocal
    run: |
      export HOME=/work/.home
      echo "HOME" $HOME
      export GIMP_PREFIX="/usr/local"
      export LD_LIBRARY_PATH="/usr/local/lib/x86_64-linux-gnu:/usr/local/lib:${LD_LIBRARY_PATH}"
      echo $LD_LIBRARY_PATH
      export XDG_DATA_DIRS="/usr/local/share:/usr/share:$XDG_DATA_DIRS"
      echo $XDG_DATA_DIRS
      export PATH="/usr/local/bin:$PATH"
      export GEGL_PATH="/usr/local/lib/x86_64-linux-gnu"
      echo "GEGL_PATH" $GEGL_PATH
      which gegl
      export GI_TYPELIB_PATH=/usr/local/lib/x86_64-linux-gnu/girepository-1.0:/usr/local/lib/girepository-1.0
      echo "GI_TYPELIB_PATH" $GI_TYPELIB_PATH
      export NO_AT_BRIDGE=1

      /usr/local/bin/gimp-2.99 --verbose

  # export GEGL_PATH="/usr/local/lib/x86_64-linux-gnu/gegl-0.4"

  gimpMesonRunGUI: !Command
    description: Run the meson built gimp GUI in gimpMesonDev container
    container: gimpMesonDev
    run: |
      export HOME=/work/.home
      echo "HOME" $HOME
      export GIMP_PREFIX="/usr/local"
      export LD_LIBRARY_PATH="/usr/local/lib/x86_64-linux-gnu:/usr/local/lib:${LD_LIBRARY_PATH}"
      echo $LD_LIBRARY_PATH
      export XDG_DATA_DIRS="/usr/local/share:/usr/share:$XDG_DATA_DIRS"
      echo $XDG_DATA_DIRS
      export PATH="/usr/local/bin:$PATH"
      export GEGL_PATH="/usr/local/lib/x86_64-linux-gnu/gegl-0.4/"
      echo "GEGL_PATH" $GEGL_PATH
      which gegl
      export GI_TYPELIB_PATH=/usr/local/lib/x86_64-linux-gnu/girepository-1.0:/usr/local/lib/girepository-1.0
      echo "GI_TYPELIB_PATH" $GI_TYPELIB_PATH
      export NO_AT_BRIDGE=1

      /usr/local/bin/gimp-2.99 --verbose

  # quicker startup
  gimpTestGUI: !Command
    description: Run gimp GUI in gimpDev container, with user's plugins in home
    container:  gimpAMDev
    run: |
      export HOME=/work/.home
      echo "HOME" $HOME
      export GIMP_PREFIX="/usr/local"
      export LD_LIBRARY_PATH="/usr/local/lib/x86_64-linux-gnu:/usr/local/lib:${LD_LIBRARY_PATH}"
      echo $LD_LIBRARY_PATH
      export XDG_DATA_DIRS="/usr/local/share:/usr/share:$XDG_DATA_DIRS"
      echo $XDG_DATA_DIRS
      export PATH="/usr/local/bin:$PATH"
      export GEGL_PATH="/usr/local/lib/x86_64-linux-gnu/gegl-0.4"
      echo "GEGL_PATH" $GEGL_PATH
      which gegl
      export GI_TYPELIB_PATH=/usr/local/lib/x86_64-linux-gnu/girepository-1.0:/usr/local/lib/girepository-1.0
      echo "GI_TYPELIB_PATH" $GI_TYPELIB_PATH
      export NO_AT_BRIDGE=1

      echo "Removing old plugins and gimpfu source"
      rm -rf /work/.home/.config/GIMP/2.99/plug-ins/*

      echo "Copying test plugins"
      # all
      # cp -r /work/plug-ins/* /work/.home/.config/GIMP/2.99/plug-ins

      # just a few
      # megaTestGimp
      cp -r /work/plug-ins/mega*      /work/.home/.config/GIMP/2.99/plug-ins
      # testColor
      cp -r /work/testPlugins/testRGB /work/.home/.config/GIMP/2.99/plug-ins

      echo "Chmoding test plugins"
      # find -D exec /work/.home/.config/GIMP/2.99/plug-ins -name *.py -exec chmod +x '{}' + -print
      find -D exec /work/.home/.config/GIMP/2.99/plug-ins -type f -name "*.py" -exec chmod +x {} \; -print

      echo "Copying gimpfu source directory to local plugin directory"
      cp -r /work/gimpfu /work/.home/.config/GIMP/2.99/plug-ins

      echo "Altering PYTHONPATH to point to local plug-ins"
      export PYTHONPATH=/work/.home/.config/GIMP/2.99/plug-ins/gimpfu:${PYTHONPATH}
      echo $PYTHONPATH

      # export G_MESSAGES_DEBUG=all
      # /usr/local/bin/gimp-2.99 --verbose --no-data

      /usr/local/bin/gimp-2.99 --verbose

  # quicker startup
  generateGIDocs: !Command
    description: Generate GI docs from  gimpAMDev container to work/.home
    container:  gimpAMDev
    run: |
       g-ir-doc-tool --language=Python -o /work/.home/gimp-doc /usr/local/share/gir-1.0/Gimp-3.0.gir
       echo "Generated to .home/gimp-doc"


  gimpListPlugins: !Command
    description: List local plugins in gimpdev container
    container: gimpLocal
    run: |
      ls -alR $HOME/.config/GIMP/2.99/plug-ins
      cat $HOME/.config/GIMP/2.99/plug-ins/test/test.py


  # uncomment ## in gimp/plug-ins/Makefile.am
  # not working, read-only file system
  makePyGimp: !Command
    description: Remake PyGimp in gimpdev container
    container: gimpDev
    run: |
      cd /home/gimp
      make
