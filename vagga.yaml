# Vagga script to build latest GIMP (2.99)

# Requirements of the host machine:
# vagga installed (see web)
# uidmap installed
#     >sudo apt-get install uidmap

# a chain of containers, to minimize rebuilding as changes are made.
# Each container depends on previous as specified by "!Container foo"

# Goal or current design of this script:
# 1) use latest packaged dependencies (e.g. glib) from the distribution of the container
# 2) build artifacts: babl, gegl, gimp
# 3) install build artifacts in the usual place (don't worry about polluting the container)
#    i.e. not define any special GIMP_PREFIX


containers:

  # basic OS with dev (compiling)
  baseOS:
    setup:
    # 18.10
    # - !Ubuntu cosmic
    # 19.04
    # - !Ubuntu disco
    # 19.10, which has meson 51
    # - !Ubuntu eoan
    # 20.4 LTS
    # - !Ubuntu focal
    # June 16, 2020 focal fails at dbus_cil package from glib2_test package
    # 20.10
    - !Ubuntu groovy


    # enable universe repository (where gimp lives)
    - !UbuntuUniverse
    # tools for dev (C compiler)
    - !Install [build-essential]
    - !Install [gdb]




  # with required build tools
  # Some tools are for optional build: meson, clang
  baseWithTools:
    setup:
    - !Container baseOS



    # GIMP build needs setuptools
    - !Install [python3-setuptools]

    # meson is a python3 app
    # Install packaged version, which might be too old.
    # Alternatively, get latest using pip
    #- !Sh pip3 install meson
    - !Install [meson]

    # clang versus gcc
    - !Install [clang]
    # gnu ld vs llvm's lld (installs as ld.lld)
    - !Install [lld]

    # meson and autotools use pkg-config
    - !Install [pkg-config]

    # meson.build calls git
    - !Install [git]

    # meson will use cmake if available?
    - !Install [cmake]

    # build uses gobject introspection tools
    - !Install [gobject-introspection]

    # more tools
    - !Install [ xsltproc]

    # tool to build API docs
    - !Install [gtk-doc-tools]

    # specific to autotools build
    - !Install [libtool]

    # in8n internationalization
    - !Install [intltool]

    # build scripts call git and test to establish version
    - !Sh which git
    - !Sh which test



  # with required libraries
  generalDeps:
    setup:
    - !Container baseWithTools

    # babl, gegl, GIMP uses glib group of libraries
    # package comprises glib, gobject, and gio
    # Oct. 2020: fails for [glib2.0] with MONO exception.  Use -dev
    - !Install [glib2.0-dev]

    # the builds deposit introspection data
    # If omit, get can't find ...gir... when building gegl
    - !Install [libgirepository1.0-dev]

    # babl specific

    # links against lcms2 (lite color mgt system) library, need the dev flavor
    - !Install [liblcms2-dev]

    # gegl specific

    # depends on babl (which we build), and these libraries from packages
    - !Install [libjson-glib-dev]

    # gimp specific





  # with more required libraries.
  # Gimp requires
  # !!! Some dependency is through gegl, must be here when gegl built
  # these are package names, might depend on distribution
  gimpDeps:
    setup:
    - !Container generalDeps

    # Somewhat in reverse order of complain by build

    # plugin interpreters
    # Python3 PyGObject.  See earlier, installed Python3
    - !Install [ python3-gi]
    # lua
    - !Install [ luajit]
    - !Install [ lua-lgi ]
    # javascript
    - !Install [ gjs]


    # plugins, mainly file format plugins?
    # JPEG format
    - !Install [ libjpeg-dev]
    # TIFF format
    - !Install [ libtiff-dev]
    # PDF format
    - !Install [ libpoppler-glib-dev]
    - !Install [ poppler-data]

    # file compressors
    - !Install [ liblzma-dev]
    - !Install [ libbz2-dev]

    # ???
    - !Install [ libxmu-dev]
    - !Install [ libappstream-glib-dev]
    - !Install [ librsvg2-dev]

    # mypaint
    - !Install [ mypaint-brushes]
    - !Install [ libmypaint-dev]

    # accessibility toolkit
    - !Install [ libatk1.0-dev]

    #image metadata
    - !Install [ libgexiv2-dev]

    # graphics toolkit: GTK and GDK
    - !Install [ libgtk-3-dev]

    # gtk-encode-symbolic-svg
    # To search installed packages: dpkg -S gtk-encode-symbolic-svg
    # To search Ubuntu in browser "Ubuntu Packages Search"
    # Prior to Ubuntu 20.04:  - !Install [ gtk-3-examples]
    - !Install [libgtk-3-bin]

    # ?
    - !Install [ libgdk-pixbuf2.0-dev]

    # renderers
    - !Install [ libpango1.0-dev]
    - !Install [ libcairo2-dev]

    # optional but suppress warnings
    - !Install [ libcanberra-gtk3-module ]

    # optional for browsing API docs
    - !Install [ yelp ]

    # Ubuntu requires this else Gimp..Gtk crashes with:  Icon 'image-missing' not present in theme Symbolic
    - !Install [ gnome-icon-theme ]

    # Since 2.99.2, Gimp requires vala compiler
    - !Install [ valac ]

    # avoid dbus error messages from gimp
    - !Install [ dbus-x11 ]

    # Below not required by gimp, just required by my dev

    # to run gimp in dbg in a gnome-terminal
    - !Install [ gnome-terminal ]

    # some my vagga commands want wget
    - !Install [wget]

    # Larger /tmp for testing
    # 100Mi is default, not enough to create many image files
    volumes:
      /tmp: !Tmpfs { size: 500Mi, mode: 0o1777 }

    environ:
      HOME: /work/.home



  # with babl, gegl source
  # gimp requires latest babl, gegl, so we build instead of install
  # These are relatively stable compared to gimp source
  gimpDepsSource:
    setup:
    - !Container gimpDeps

    - !Sh rm /etc/resolv.conf


    # This causes build to fail, can't find git_version.h because this gets only the files, not .git
    #- !Git
    #  url: https://gitlab.gnome.org/GNOME/babl.git
    #  path: /home/babl

    # OR use git to clone the repository
    #- !Sh |
    #   git clone https://gitlab.gnome.org/GNOME/babl.git /home/babl

    # OR most most recent release archive
    # 1.72=>1.74=>1.78=>1.84
    # When you change this, also change below the cd
    - !Tar
      url: https://download.gimp.org/pub/babl/0.1/babl-0.1.84.tar.xz
      path: /home




    # Gimp depends on latest gegl which might not be released by gegl.org
    # i.e. get from gimp.org OR get from gegl.org
    # !!! If you change this, also change below the cd to the gegl dir, named differently

    # Get from gimp.org
    #- !Tar
    #  url: https://download.gimp.org/pub/gegl/0.4/gegl-0.4.18.tar.xz
    #  url: https://download.gimp.org/pub/gegl/0.4/gegl-0.4.24.tar.xz
    #  path: /home

    # Get latest, bleeding, from shared, bare repository at gegl.org

    # !!! Must specify a revision, else vagga will, the first time get the latest
    # !!! and subsequently cache it indefinitely.  See vagga docs.
    # !!! But you can't get the latest revision until it is released.
    # So delete contents of the cache ~/.cache/vagga/cache when gegl changes
    # Or delete the directory ...cache/git
    # Or specify the revision that GIMP wants
    #  Fail: revision: 4.27
    # Only a specific commit seems to work, look it up at gitlab gegl

    - !Git
      url: https://gitlab.gnome.org/GNOME/gegl
      path: /home/gegl
      revision: 811bd306





  # With built babl, gegl
  bablGeglDev:
    setup:
    - !Container gimpDepsSource

    # Build (from source) certain prereqs of gimp: babl, gegl

    # We don't do this.  Instead we install to default place.
    # set prefix: directory where GIMP build scripts will install stuff
    #- !Env
    #  GIMP_PREFIX: /home

    # If Debian, need the architecture label
    # TODO not working, see below, hardcoded
    - !Sh echo "Determine architecture"
    - !Sh dpkg-architecture -qDEB_HOST_MULTIARCH 2> /dev/null
    - !Env
      MY_ARCH: dpkg-architecture -qDEB_HOST_MULTIARCH 2> /dev/null
    - !Sh echo $MY_ARCH

    # Used by GIMP build to detect the build dependencies
    # E.G. gegl depends on babl installed and uses pkgconfig to find it
    # This has Debian path prepended
    # TODO "${GIMP_PREFIX}/lib/${MY_ARCH}/pkgconfig:${GIMP_PREFIX}/lib/pkgconfig:${GIMP_PREFIX}/share/pkgconfig"
    #- !Env
    #  PKG_CONFIG_PATH: "/home/lib/x86_64-linux-gnu/pkgconfig:/home/lib/pkgconfig:/home/share/pkgconfig"
    - !Sh echo $PKG_CONFIG_PATH


    # Note babl and gegl build the same
    # WAS: cd /home/babl-0.1.74 => 1.78

    - !Sh |
        cd /home/babl-0.1.84
        meson _build \
         --buildtype=release \
          -Db_lto=true
        cd _build
        ninja
        ninja install

    # Partial check of installed artifacts, installed in default location
    #- !Sh test -d /usr/local/share/gir-1.0/babl/Babl-0.1.gir


    # build gegl

    # When it builds, it lists options that will be built, according to installed libraries it finds
    # e.g. won't build umfpack if libumfpack5 is not installed
    # Then at GIMP runtime, it may complain of missing GEGL ops

    # Used to find the glib-introspection dependencies.
    # gegl builds its introspection data.
    # To do so, it must find Babl-0.1.gir
    # was  XDG_DATA_DIRS: "/home/share:/usr/share:$XDG_DATA_DIRS"
    # was  XDG_DATA_DIRS: "/usr/local/shared"

    - !Env
      XDG_DATA_DIRS: "/usr/local/share:/usr/share"

    - !Sh echo ">>>>>>  XDG_DATA_DIRS"
    - !Sh echo $XDG_DATA_DIRS
    - !Sh echo ">>>>>>"

    # !!! Not using     --prefix=${GIMP_PREFIX} \
    # Use cd /home/gegl-0.4.xx for a tar pull
    # Use cd /home/gegl for a git pull
    - !Sh |
        cd /home/gegl
        meson _build \
         --buildtype=release \
          -Db_lto=true
        cd _build
        ninja
        ninja install

    # remove DNS file that vagga will recreate after build
    - !Sh "rm /etc/resolv.conf"

    # Using !Git, but that does not create a git repository so this doesn't work
    # cd /home/gegl
    # git status

    # setup for building gimp
    # Source is out of the container; is code we are changing
    # build dir is not in the container
    - !Sh |
        cd /work/gimp
        meson /work/gimpBuild \
         --buildtype=debug \
         -Djavascript=false \
         -Dlua=false \
         -Dpython=true \
         -Dgtk-doc=false





  # !!! Note the containers branch here.
  # Later, choose one of these on which to build gimpLocal





  # With built gimp
  # Uses AM automake variant of build system for Gimp
  # Formerly copied source into container
  gimpAMDev:
    setup:
    - !Container bablGeglDev

    # rebuild container when changed: local clone of gimp repository (in /work i.e. project directory )
    # !!! The build must not put the _build directory in this directory, else container will fail
    # with: Can't write image usage info: No such file or directory (os error 2)
    # meaning the dependency changed during container build
    - !Depends gimp

    # Get Gimp sources

    # latest, bleeding
    #- !Git
    #  url: https://gitlab.gnome.org/GNOME/gimp.git
    #  path: /home/gimp

    # Options
    # See INSTALL or INSTALL.in file in repository.  Seems definitive

    - !Env LD_LIBRARY_PATH: "/usr/local/lib/x86_64-linux-gnu:/usr/lib"
    - !Env XDG_DATA_DIRS: "/usr/local/share:/usr/share"

    # echo environment
    - !Sh echo "home ->"  $HOME
    - !Sh echo "library path ->"  $LD_LIBRARY_PATH
    - !Sh echo "introspection path ->"  $XDG_DATA_DIRS
    - !Sh echo "binary path ->" $PATH

    # Build gimp

    # My customization of the bare commands
    # disabling docs, python, vector-icons
    # --jobs=4 or -j4
    # ??? make distclean to alleviate "unrecognized file format"
    # --disable-python ?? what does that prevent? PyGimp, or build Python interpreter, or install Python plugins
    # --disable-docs ?? user manual?
    # --disable-gtk-doc ?? programmers reference manual (libgimp API and PDB?)

    # --disable-vector-icons was working until Jan. 12

    # preface: CFLAGS="-fsanitize=address -fno-omit-frame-pointer"
    # option to rebuild PDB      autogen.sh --with-pdbgen
    # make -j4

    # Build in a directory copied into the container (in tree since it creates _build?)
    - !Copy
      source: /work/gimp
      path:  /home/gimp

    - !Sh |
        cd /home/gimp
        CFLAGS="-fsanitize=address -fno-omit-frame-pointer" ./autogen.sh --disable-docs --enable-debug --with-pdbgen
        make all-am -j4
        make install

    # Build out of source tree, but build in the container
    # This doesn't work yet.
    #- !EnsureDir /gimpBuild
    #- !Sh |
    #    cd gimpBuild
    #    export SRCTREE=/work/gimp
    #    CFLAGS="-fsanitize=address -fno-omit-frame-pointer" ./autogen.sh --disable-docs --enable-debug --with-pdbgen
    #    /work/gimp/configure
    #    make all-am -j4
    #    make install

    # remove DNS file that vagga will recreate after build
    - !Sh "rm /etc/resolv.conf"

    #
    environ:
      LD_LIBRARY_PATH: "/usr/local/lib/x86_64-linux-gnu:/usr/lib"
      XDG_DATA_DIRS: "/usr/local/share:/usr/share"
      PATH: "/usr/local/bin:/usr/bin:/bin"

    # Try not to alter this container, it is stock container after GIMP build
    # Note that /usr/local/lib/gimp/2.99/plug-ins/python does not exist





  # Container ready to build GIMP
  # Build directory is not in the container.
  # GIMP is not built or installed in the container
  # Local custom Gimp plugins not in the container.

  # The container should NOT automatically rebuild if /work/gimp source changes
  # But if you change a meson.build file, you need to rebuild this container??

  gimpMesonDev:
    setup:
    - !Container bablGeglDev

    # This container NOT depend on changed gimp source
    # Note that meson builds out of tree, i.e. does not touch gimp directory
    # Except that it does, it puts pdbgen files back in the source tree

    # resolve FAILED: cursors/gimp-tool-cursors.c   Related to vector icons?
    - !Env  XDG_DATA_DIRS: "/usr/local/share:/usr/share"

    # resolve ../plug-ins/common/file-pdf-load.c:32:10: fatal error: poppler.h: No such file or directory
    - !Env LD_LIBRARY_PATH: "/usr/local/lib/x86_64-linux-gnu:/usr/lib"

    - !EnsureDir /work/gimpBuild

    #### Options for GIMP build
    # -Dpoppler=false => -Dpdf=false is not correct
    # -Dpoppler=false still fails to build

    # --buildtype=release \        currently crashes g-ir-scanner SIGILL

    # each version of gcc has its own libasanx
    # TODO this may not be necessary
    # - !Install [ libx32asan5 ]

    # -Db_-shared-libasan
    # env CC=clang CXX=clang++ CC_LD=/usr/bin/ld.lld CXX_LD=/usr/bin/ld.lld LDFLAGS=-shared-libasan meson _build
    # -Db_sanitize=address

    # -v      verbose

    # setup build outside the source tree
    - !Sh |
        cd /work/gimp
        meson setup /work/gimpBuild \
         --buildtype=debug \
         -Djavascript=false \
         -Dlua=true \
         -Dpython=true \
         -Dgtk-doc=false

    environ:
      HOME: /work/.home


  # Container with Guile and Guile-GI
  gimpGuileGIInstalled:
    setup:
    - !Container bablGeglDev

    # guile package for development
    - !Install [ guile-3.0-dev ]

    # missing command makeinfo
    - !Install [ texinfo ]


    # Clone Guile-GI
    - !Git
      url: https://github.com/spk121/guile-gi.git
      path: /work/guile-gi
    # Build it
    # ACLOCAL_PATH=/usr/local/share/aclocal ./bootstrap
    - !Sh |
        cd /work/guile-gi
        ./bootstrap
        ./configure
        make
        make install



  # Container with GIMP installed
  # Base on gimpMesonDev usually
  gimpMesonInstalled:
    setup:
    - !Container gimpGuileGIInstalled
    # - !Install [ libmypaint-dev]

    # This tells vagga that this container depends on changed gimp source
    # We don't need that because meson knows when it needs to rebuild ??
    - !Depends /work/gimp

    # resolve FAILED: cursors/gimp-tool-cursors.c   Related to vector icons?
    - !Env  XDG_DATA_DIRS: "/usr/local/share:/usr/share"

    # resolve ../plug-ins/common/file-pdf-load.c:32:10: fatal error: poppler.h: No such file or directory
    - !Env LD_LIBRARY_PATH: "/usr/local/lib/x86_64-linux-gnu:/usr/lib"

    # Build from the build directory.
    # Installs into the container
    # jobs defaults to 3??
    - !Sh |
        cd /work/gimpBuild
        ninja -j 4
        ninja install

    # Also volumes for test plugins
    volumes:
      /work/testGimpPDB: !BindRO /volumes/testGimpPDB
      /work/testGimpExportImport: !BindRO /volumes/testGimpExportImport
      /work/testGimpScriptFuBinding: !BindRO /volumes/testGimpScriptFuBinding

      # Larger /tmp for testing
      # 100Mi is default, not enough to create many image files
      /tmp: !Tmpfs { size: 500Mi, mode: 0o1777 }

    environ:
      HOME: /work/.home


  # Container with installed gimp, built using meson
  # !!! source is not in the container, but container depends on it and vagga
  # will rebuild container if gimp source changes.


  # Final container with a few more customizations
  # Faster if a command does this.  Some commands copy plugins into the container.
  gimpAMLocal:
    setup:
    # Choice:
    - !Container gimpAMDev

    # Generate documentation for Python language bindings to Gimp, etc.
    # Same documents for GLib, GObj, Gio webbed at "PyGObject API Reference"
    #
    # - !Sh g-ir-doc-tool --language=Python -o /work/.home/gimp-doc /usr/local/share/gir-1.0/Gimp-3.0.gir

    #- !Sh g-ir-doc-tool --language=Python -o /work/.home/gimpui-doc /usr/local/share/gir-1.0/GimpUi-3.0.gir
    #- !Sh g-ir-doc-tool --language=Python -o /work/.home/glib-doc /usr/share/gir-1.0/GLib-2.0.gir
    #- !Sh g-ir-doc-tool --language=Python -o /work/.home/gobj-doc /usr/share/gir-1.0/GObject-2.0.gir
    ## crashes: - !Sh g-ir-doc-tool --language=Python -o /work/.home/gio-doc /usr/share/gir-1.0/Gio-2.0.gir

    # pgi-docgen produces nicer documents
    # See my static html copy at ~/PythonGIDocs

    # Generate latest copy only for Gimp
    # WIP needs pgi-docgen and many dependencies
    #- !Sh |
    #    pgi-docgen create /work/.home/_docs Gimp-3.0
    #    pgi-docgen build /work/.home/_docs /work/.home/_docs/_build

    # rebuild container if test plugin source (in /work i.e. project directory ) changes
    - !Depends plugins

    # create container user's .config for GIMP, to hold locally installed plug-ins
    - !EnsureDir /work/.home/.config/GIMP/2.99/plug-ins

    # ensure a directory to mount to
    - !EnsureDir /work/testGimpPDB
    - !EnsureDir /work/testGimpExportImport
    - !EnsureDir /work/testGimpScriptFuBinding

    # mount directories from outside the container
    # /volumes/ is defined in .config/vagga/settings.html

    # This is mounting plugin directories kept in ~/git/testGimpPDB

    # /root:   means to mount it in .vagga/container/work ???
    # /root/testGimpPDB:   means to mount it ???
    volumes:
      /work/testGimpPDB: !BindRO /volumes/testGimpPDB
      /work/testGimpExportImport: !BindRO /volumes/testGimpExportImport
      /work/testGimpScriptFuBinding: !BindRO /volumes/testGimpScriptFuBinding

      # Larger /tmp for testing
      # 100Mi is default, not enough to create many image files
      /tmp: !Tmpfs { size: 500Mi, mode: 0o1777 }

    environ:
      HOME: /work/.home




# Cruft

# Gimp will put it in the PYTHONPATH, we don't want to find its contents
# EmptyDir is not correct, it keeps the directory empty is all child containers
# - !EmptyDir /usr/local/lib/gimp/2.99/python
#- !Sh "rm -rf /usr/local/lib/gimp/2.99/python/*"


commands:

  # baseOS does not contain many tools
  testOS: !Command
    description: Test sanity of OS in container baseOS
    container: baseOS
    run: |
      which which
      which pkg-config
      python -V
      wget --version
      curl --version

  testMeson: !Command
    description: Test sanity of meson in container withTools
    container: baseWithTools
    run: |
      meson -h
      which pkg-config
      which python3
      which intltool
      python3 -V
      wget --version

  testSource: !Command
    description: List contents of cloned source
    container: gimpDepsSource
    run: |
      echo "Contents of /babl"
      ls /home/babl
      which git
      echo "trying: pkg-config gegl"
      pkg-config gegl-0.4 --modversion


  bablGeglVersions: !Command
    description: Get version of built babl and gegl in bablGeglDev
    container: bablGeglDev
    run: |
      echo "$PKG_CONFIG_PATH is:" $PKG_CONFIG_PATH
      export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig
      echo "$PKG_CONFIG_PATH is:" $PKG_CONFIG_PATH# Show that it installed .so
      echo "Listing /usr/local/lib/x86_64-linux-gnu"
      ls /usr/local/lib/x86_64-linux-gnu
      echo "Version of gegl using: pkg-config gegl"
      pkg-config --modversion gegl-0.4

  # It doesn't seems to matter that /usr/local/lib/x86_64-linux-gnu/pkgconfig is not in PKG_CONFIG_PATH




  #   cd /home/gegl-0.4.18/_build
  #    ninja test


  gimpMesonVersions: !Command
    description: describe versions in container gimpMesonInstalled (where built Gimp)
    container: gimpMesonInstalled
    run: |
      export HOME=/work/.home
      export GIMP_PREFIX="/usr/local"
      export LD_LIBRARY_PATH="/usr/local/lib/x86_64-linux-gnu:/usr/local/lib:${LD_LIBRARY_PATH}"
      echo "LD_LIBRARY_PATH"
      echo $LD_LIBRARY_PATH
      # Note gegl is not in dpkg
      #echo "Gegl version from dpkg"
      #dpkg -l | grep gegl
      echo "Gegl version from pkg-config"
      pkg-config --modversion gegl-0.4
      echo "GLib version from pkg-config"
      pkg-config --modversion glib-2.0
      echo "Python version from python3 --version"
      python3 --version
      echo "PyGObject version from python"
      python3 -c "from gi.repository import GObject
      GObject.pygobject_version"
      echo "Gimp version from gimp-2.99 --version"
      /usr/local/bin/gimp-2.99 --version


  gimpAMVersion: !Command
    description: Get version of gimp in gimpLocal container
    container: gimpLocal
    run: |
      export LD_LIBRARY_PATH="/usr/local/lib/x86_64-linux-gnu:/usr/local/lib:${LD_LIBRARY_PATH}"
      echo $LD_LIBRARY_PATH
      /usr/local/bin/gimp-2.99 --version

  gimpAMConfig: !Command
    description: Get config options of gimp in gimpLocal container
    container: gimpLocal
    run: |
      cd /home/gimp
      ./configure --help

  # if you have yelp installed outside the container, and pwd is vaggaGimp, just "yelp .home/gimp-doc"
  gimpBrowse: !Command
    description: Browse Gimp GI use  >vagga --use-env DISPLAY gimpBrowse
    container: gimpLocal
    run: |
      yelp /work/.home/gimp-doc




  # to run this, use     vagga --use-env DISPLAY gimpRunGUI

  # export GEGL_PATH="/usr/local/bin/gegl"
  # GEGL_PATH should point to the .so parent directory
  # gegl -v

  # gimp typelib in /usr/local/lib/girepository-1.0
  # gegl, babl typelib in /usr/local/lib/x86_64-linux-gnu/gi...

  gimpAMGUI: !Command
    description: Run gimp GUI in gimpAMLocal container, with locally installed plugins
    container: gimpAMLocal
    run: |
      export HOME=/work/.home
      export GIMP_PREFIX="/usr/local"
      export LD_LIBRARY_PATH="/usr/local/lib/x86_64-linux-gnu:/usr/local/lib:${LD_LIBRARY_PATH}"
      export XDG_DATA_DIRS="/usr/local/share:/usr/share:$XDG_DATA_DIRS"
      export PATH="/usr/local/bin:$PATH"
      export GEGL_PATH="/usr/local/lib/x86_64-linux-gnu"
      export GI_TYPELIB_PATH=/usr/local/lib/x86_64-linux-gnu/girepository-1.0:/usr/local/lib/girepository-1.0
      export NO_AT_BRIDGE=1

      # local plugins in /work/.home/.config/GIMP/2.99/plug-ins
      # !!! outside the container
      mkdir /work/.home/.config/GIMP/2.99/plug-ins

      # Copy a scheme script
      echo "Copying defectscript soap"
      cp -rv /work/plugins/nonGimpFu/testGeglOp.scm /work/.home/.config/GIMP/2.99/scripts
      #cp -rv /work/plugins/nonGimpFu/defectsript-v01.scm /work/.home/.config/GIMP/2.99/scripts


      # Refresh installation of gimpfu from development gimp_directory
      # Copy entire directory into the plug-ins directory
      echo "Copying gimpfu to local"
      cp -rv /work/gimpfu /work/.home/.config/GIMP/2.99/plug-ins

      echo "Copying all test plugins"
      cp -r /work/plugins/test/* /work/.home/.config/GIMP/2.99/plug-ins

      echo "Copying testGimpPDB"
      mkdir /work/.home/.config/GIMP/2.99/plug-ins/testGimpPDB
      cp -r /work/testGimpPDB/* /work/.home/.config/GIMP/2.99/plug-ins/testGimpPDB

      echo "Copying testGimpExportImport"
      # Copy from a volume of the container
      mkdir /work/.home/.config/GIMP/2.99/plug-ins/testGimpExportImport
      cp -r /work/testGimpExportImport/* /work/.home/.config/GIMP/2.99/plug-ins/testGimpExportImport

      echo "Copying testGimpScriptFuBinding"
      mkdir /work/.home/.config/GIMP/2.99/plug-ins/testGimpScriptFuBinding
      cp -r /work/testGimpScriptFuBinding/* /work/.home/.config/GIMP/2.99/plug-ins/testGimpScriptFuBinding

      # -O -   means: pipe to stdout
      #wget https://github.com/bootchk/testGimpPDB/tarball/master
      #tar xz -f master
      #rm master
      # copy contents of top directory to a new directory
      #mkdir /work/.home/.config/GIMP/2.99/plug-ins/testGimpPDB
      #cp -r bootchk-testGimp*/* /work/.home/.config/GIMP/2.99/plug-ins/testGimpPDB
      #rm -rf bootchk-testGimp*
      #rm -rf wget-log*

      #echo "Chmoding test plugins"
      find -D exec /work/.home/.config/GIMP/2.99/plug-ins -type f -name "*.py" -exec chmod +x {} \; -print

      echo "Altering PYTHONPATH to point to local plug-ins"
      export PYTHONPATH=/work/.home/.config/GIMP/2.99/plug-ins/gimpfu:${PYTHONPATH}
      echo $PYTHONPATH

      # For asan
      export LD_PRELOAD=$(gcc -print-file-name=libasan.so)

      # stop glib at warnings
      #export G_DEBUG=fatal-warnings
      # all domains, info and debug
      # export G_MESSAGES_DEBUG=all
      export G_MESSAGES_DEBUG=scriptfu

      # Per devel-docs/debugging
      # Mostly GUI messages
      # export GIMP_DEBUG=all

      # This fails to open a terminal ?
      # /usr/bin/gnome-terminal &

      # Also fails: gimp --stack-trace-mode=always
      # should be space, not = ??

      export GIMP_PLUGIN_DEBUG=all,fatal-criticals
      #export GIMPFU_DEBUG=1

      # /usr/local/bin/gimp-2.99 --verbose --stack-trace-mode always
      /usr/local/bin/gimp-2.99 --verbose --stack-trace-mode query







  # export GEGL_PATH="/usr/local/lib/x86_64-linux-gnu/gegl-0.4"

  gimpMesonGUI: !Command
    description: Run meson gimp GUI in gimpMesonInstalled container (need --use-env DISPLAY), w/o plugins
    container: gimpMesonInstalled
    run: |
      export HOME=/work/.home
      echo "HOME" $HOME
      export GIMP_PREFIX="/usr/local"
      export LD_LIBRARY_PATH="/usr/local/lib/x86_64-linux-gnu:/usr/local/lib:${LD_LIBRARY_PATH}"
      echo $LD_LIBRARY_PATH
      export XDG_DATA_DIRS="/usr/local/share:/usr/share:$XDG_DATA_DIRS"
      echo $XDG_DATA_DIRS
      export PATH="/usr/local/bin:$PATH"
      export GEGL_PATH="/usr/local/lib/x86_64-linux-gnu/gegl-0.4/"
      echo "GEGL_PATH" $GEGL_PATH
      which gegl
      export GI_TYPELIB_PATH=/usr/local/lib/x86_64-linux-gnu/girepository-1.0:/usr/local/lib/girepository-1.0
      echo "GI_TYPELIB_PATH" $GI_TYPELIB_PATH
      export NO_AT_BRIDGE=1

      export GIMP_PLUGIN_DEBUG=all,fatal-criticals
      #export GIMPFU_DEBUG=1

      #export G_MESSAGES_DEBUG=scriptfu

      # /usr/local/bin/gimp-2.99 --verbose
      /usr/local/bin/gimp-2.99 --stack-trace-mode query



  # -O -   means: pipe to stdout
  #wget https://github.com/bootchk/testGimpExportImport/tarball/master
  #tar xz -f master
  #rm master
  # copy contents of top directory to a new directory
  #mkdir /work/.home/.config/GIMP/2.99/plug-ins/testGimpExportImport
  #cp -r bootchk-testGimp*/* /work/.home/.config/GIMP/2.99/plug-ins/testGimpExportImport
  #rm -rf bootchk-testGimp*
  #rm -rf wget-log*
  #curl -L  https://github.com/bootchk/testGimpExportImport/tarball/master | tar xz -C /work/.home/.config/GIMP/2.99/plug-ins

  gimpMesonTestGUI: !Command
    description: Run gimp GUI in gimpMesonInstalled container, creating user's plugins in home
    container:  gimpMesonInstalled
    run: |
      export HOME=/work/.home
      export GIMP_PREFIX="/usr/local"
      export LD_LIBRARY_PATH="/usr/local/lib/x86_64-linux-gnu:/usr/local/lib:${LD_LIBRARY_PATH}"
      export XDG_DATA_DIRS="/usr/local/share:/usr/share:$XDG_DATA_DIRS"
      export PATH="/usr/local/bin:$PATH"
      export GEGL_PATH="/usr/local/lib/x86_64-linux-gnu/gegl-0.4"
      export GI_TYPELIB_PATH=/usr/local/lib/x86_64-linux-gnu/girepository-1.0:/usr/local/lib/girepository-1.0
      export NO_AT_BRIDGE=1

      echo "HOME"            $HOME
      echo "GIMP_PREFIX"     $GIMP_PREFIX
      echo "LD_LIBRARY_PATH" $LD_LIBRARY_PATH
      echo "XDG_DATA_DIRS"   $XDG_DATA_DIRS
      echo "PATH"            $PATH
      echo "GEGL_PATH"       $GEGL_PATH
      echo "GI_TYPELIB_PATH" $GI_TYPELIB_PATH



      echo "Removing old plugins and gimpfu source"
      rm -rf /work/.home/.config/GIMP/2.99/plug-ins/*

      echo "Copying all wild test plugins"
      #cp -r /work/plugins/wild/* /work/.home/.config/GIMP/2.99/plug-ins

      echo "Copying selected nonGimpfu plugins"
      cp -r /work/plugins/nonGimpFu/myMinPlugin /work/.home/.config/GIMP/2.99/plug-ins
      cp -r /work/plugins/nonGimpFu/testGegl    /work/.home/.config/GIMP/2.99/plug-ins

      echo "Copying all my test plugins"
      cp -r /work/plugins/test/* /work/.home/.config/GIMP/2.99/plug-ins

      # Copy some plugins from volumes of the container

      echo "Copying testGimpExportImport"
      mkdir /work/.home/.config/GIMP/2.99/plug-ins/testGimpExportImport
      cp -r /work/testGimpExportImport/* /work/.home/.config/GIMP/2.99/plug-ins/testGimpExportImport

      echo "Copying testGimpPDB"
      mkdir /work/.home/.config/GIMP/2.99/plug-ins/testGimpPDB
      cp -r /work/testGimpPDB/* /work/.home/.config/GIMP/2.99/plug-ins/testGimpPDB

      mkdir /work/.home/.config/GIMP/2.99/plug-ins/testGimpScriptFuBinding
      cp -r /work/testGimpScriptFuBinding/* /work/.home/.config/GIMP/2.99/plug-ins/testGimpScriptFuBinding

      echo "Chmoding test plugins"
      # find -D exec /work/.home/.config/GIMP/2.99/plug-ins -name *.py -exec chmod +x '{}' + -print
      find -D exec /work/.home/.config/GIMP/2.99/plug-ins -type f -name "*.py" -exec chmod +x {} \; -print

      #echo "Copying gimpfu source directory to local plugin directory"
      #cp -r /work/gimpfu /work/.home/.config/GIMP/2.99/plug-ins
      #export PYTHONPATH=/work/.home/.config/GIMP/2.99/plug-ins/gimpfu:${PYTHONPATH}

      echo "Altering PYTHONPATH to find GimpFu"
      export PYTHONPATH=/work:${PYTHONPATH}
      echo $PYTHONPATH

      # stop glib at critical
      export G_DEBUG=fatal-critical

      # tell Gimp to debug certain plugins
      # all,fatal-warnings
      export GIMP_PLUGIN_DEBUG=file-png,fatal-warnings
      #export GIMP_PLUGIN_DEBUG=all,fatal-criticals

      export GIMPFU_DEBUG=1

      # print all G_MESSAGES
      # export G_MESSAGES_DEBUG=all
      # export G_MESSAGES_DEBUG=scriptfu

      # build Gimp
      #cd /work/gimpBuild
      #ninja -j 4
      #ninja install

      # start in a different directory to test PYTHONPATH
      #cd /work/docs

      # --verbose --no-data
      # gdb
      /usr/local/bin/gimp-2.99 --stack-trace-mode query


  gimpMesonBuild: !Command
    description: Build gimp GUI in gimpMesonDev container, but do not install
    container:  gimpMesonDev
    run: |
      echo "lkk building GIMP"
      cd /work/gimpBuild
      meson compile -j 4
      # Can't install to the read-only container
      # ninja install


  # quicker startup
  generateGIDocs: !Command
    description: Generate GI docs from  gimpMesonInstalled container to work/.home
    container:  gimpMesonInstalled
    run: |
       g-ir-doc-tool --language=Python -o /work/.home/gimp-doc   /usr/local/share/gir-1.0/Gimp-3.0.gir
       g-ir-doc-tool --language=Python -o /work/.home/gimpui-doc /usr/local/share/gir-1.0/GimpUi-3.0.gir
       echo "Generated to .home/gimp-doc"

  showEnv: !Command
    description: env in gimpMesonInstalled
    container:  gimpMesonInstalled
    run: env

  gimpListPlugins: !Command
    description: List local plugins in gimpdev container
    container: gimpLocal
    run: |
      ls -alR $HOME/.config/GIMP/2.99/plug-ins
      cat $HOME/.config/GIMP/2.99/plug-ins/test/test.py

  runUbuntuBug: !Command
    description: Run ubuntu-bug in the container
    container: gimpMesonInstalled
    run: |
      ubuntu-bug gkt3

  gdbGimp: !Command
    description: Run gdb on gimp in container gimpMesonInstalled
    container: gimpMesonInstalled
    run: |
      export HOME=/work/.home
      export GIMP_PREFIX="/usr/local"
      export LD_LIBRARY_PATH="/usr/local/lib/x86_64-linux-gnu:/usr/local/lib:${LD_LIBRARY_PATH}"
      export XDG_DATA_DIRS="/usr/local/share:/usr/share:$XDG_DATA_DIRS"
      export PATH="/usr/local/bin:$PATH"
      export GEGL_PATH="/usr/local/lib/x86_64-linux-gnu/gegl-0.4"
      export GI_TYPELIB_PATH=/usr/local/lib/x86_64-linux-gnu/girepository-1.0:/usr/local/lib/girepository-1.0
      export NO_AT_BRIDGE=1
      gdb gimp-2.99

  termGimpMeson: !Command
    description: Open terminal on container gimpMesonInstalled, use vagga --use-env DISPLAY termGimpMeson, wait for container
    container: gimpMesonInstalled
    run: |
      echo "Opening terminal on the GIMP run container"
      /usr/bin/gnome-terminal

  testGuile: !Command
    description: Run guile in container gimpGuileGIInstalled
    container: gimpGuileGIInstalled
    run: |
      echo "Starting guile"
      guile

  testGuileGimp: !Command
    description: Run guile in container gimpMesonInstalled
    container: gimpMesonInstalled
    run: |
      export GI_TYPELIB_PATH=/usr/local/lib/x86_64-linux-gnu/girepository-1.0:/usr/local/lib/girepository-1.0
      echo "Starting guile"
      guile
