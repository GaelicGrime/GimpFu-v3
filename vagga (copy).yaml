# Vagga script to build latest GIMP (2.99)

# Requirements of the host machine:
# vagga installed (see web)
# uidmap installed
#     >sudo apt-get install uidmap

# a chain of containers, to minimize rebuilding as changes are made.
# Each container depends on previous as specified by "!Container foo"

# The goal or current design is to use latest packaged dependencies (e.g. glib)
# and to build starting with babl, gegl, gimp

containers:
  
  # basic OS with dev (compiling)
  baseOS:
    setup:
    # 18.10
    # - !Ubuntu cosmic
    # 19.04
    # - !Ubuntu disco
    # ubuntu 19.10, which has meson 51
    - !Ubuntu eoan

    # enable universe repository (where gimp lives)
    - !UbuntuUniverse
    # tools for dev (C compiler)
    - !Install [build-essential]
    

  # with meson build system including dev tools
  mesonBuild:
    setup:
    - !Container baseOS
    
    # meson is a python3 app

    # GIMP build needs setuptools
    - !Install [python3-setuptools]

    # Install packaged version.
    # Which might be too old.
    - !Install [meson]

    # Alternatively, get latest using pip 
    #- !Sh pip3 install meson

    # meson and autotools use pkg-config
    - !Install [pkg-config]

    # meson.build calls git
    - !Install [git]

    # build uses gobject introspection tools
    - !Install [gobject-introspection]

    # more tools
    - !Install [ xsltproc]

    # specific to autotools build
    - !Install [libtool]

    


  # with library dependencies
  generalDeps:
    setup:
    - !Container mesonBuild

    # babl, gegl, GIMP uses glib group of libraries
    # package comprises glib, gobject, and gio
    - !Install [glib2.0]

    # the builds deposit introspection data
    # If omit, get can't find ...gir... when building gegl
    - !Install [libgirepository1.0-dev]





  # with babl, gegl, gimp source
  gimpSourceAndDeps:
    setup:
    - !Container generalDeps

    # latest, bleeding
    # from shared, bare repository
    # This causes build to fail, can't find git_version.h ???
    #- !Git
    #  url: https://gitlab.gnome.org/GNOME/babl.git
    #  path: /home/babl
    #TODO
    #git clone https://gitlab.gnome.org/GNOME/gegl.git
    #git clone https://gitlab.gnome.org/GNOME/gimp.git

    # OR most most recent release archive
    - !Tar
      url: https://download.gimp.org/pub/babl/0.1/babl-0.1.72.tar.xz
      path: /home

    - !Tar
      url: https://download.gimp.org/pub/gegl/0.4/gegl-0.4.18.tar.xz
      path: /home

    # latest, bleeding
    - !Git
      url: https://gitlab.gnome.org/GNOME/gimp.git
      path: /home/gimp
    

   

  bablDeps:
    setup:
    - !Container gimpSourceAndDeps

    # babl dependencies
    # links against lcms2 (lite color mgt system) library, need the dev flavor
    - !Install [liblcms2-dev]

    
  


    
  # Complete, ready to build babl
  bablDev:
    setup:
    - !Container bablDeps

    # Build (from source) certain prereqs of gimp: babl, gegl

    # build scripts call git and test to establish version
    - !Sh which git
    - !Sh which test

    # set prefix: directory where GIMP build scripts will install stuff
    - !Env
      GIMP_PREFIX: /home

    # If Debian, need the architecture label
    # TODO not working, see below, hardcoded
    - !Sh echo "Determine architecture"
    - !Sh dpkg-architecture -qDEB_HOST_MULTIARCH 2> /dev/null
    - !Env
      MY_ARCH: dpkg-architecture -qDEB_HOST_MULTIARCH 2> /dev/null
    - !Sh echo $MY_ARCH

    # Used by GIMP build to detect the build dependencies
    # E.G. gegl depends on babl installed and uses pkgconfig to find it
    # This has Debian path prepended
    # TODO "${GIMP_PREFIX}/lib/${MY_ARCH}/pkgconfig:${GIMP_PREFIX}/lib/pkgconfig:${GIMP_PREFIX}/share/pkgconfig"
    - !Env
      PKG_CONFIG_PATH: "/home/lib/x86_64-linux-gnu/pkgconfig:/home/lib/pkgconfig:/home/share/pkgconfig"
    - !Sh echo $PKG_CONFIG_PATH


    # Note babl and gegl build the same

    - !Sh |
        cd /home/babl-0.1.72
        meson _build \
         --prefix=${GIMP_PREFIX} \
         --buildtype=release \
          -Db_lto=true
        cd _build
        ninja
        ninja install

   



  geglDeps:
    setup:
    - !Container bablDev

    # gegl dependencies
    # depends on babl, and these libraries from packages
    - !Install [libjson-glib-dev]
    - !Install [intltool]


  # build gegl
  geglDev:
    setup:
    - !Container geglDeps
  
    # set prefix: directory where GIMP build scripts will install stuff
    - !Env
      GIMP_PREFIX: /home

    # Used by GIMP build to detect the build dependencies
    # E.G. gegl depends on babl installed and uses pkgconfig to find it
    # This has Debian path prepended
    # TODO "${GIMP_PREFIX}/lib/${MY_ARCH}/pkgconfig:${GIMP_PREFIX}/lib/pkgconfig:${GIMP_PREFIX}/share/pkgconfig"
    - !Env
      PKG_CONFIG_PATH: "/home/lib/x86_64-linux-gnu/pkgconfig:/home/lib/pkgconfig:/home/share/pkgconfig"
    - !Sh echo $PKG_CONFIG_PATH

    # Used to find the glib-introspection dependencies
    - !Env
      XDG_DATA_DIRS: "/home/share:/usr/share:$XDG_DATA_DIRS"

    - !Sh |
        cd /home/gegl-0.4.18
        meson _build \
         --prefix=${GIMP_PREFIX} \
         --buildtype=release \
          -Db_lto=true
        cd _build
        ninja
        ninja install

  # with libraries that gimp depends on
  # these are package names, might depend on distribution
  gimpDeps:
    setup:
    - !Container geglDev

    # Somewhat in reverse order of complain by meson build


    # plugins, mainly file format plugins?
    #- !Install [ liblzma-dev]
    #- !Install [ liblzma-dev]
    #- !Install [ liblzma-dev]
    #- !Install [ liblzma-dev]

    - !Install [ liblzma-dev]
    - !Install [ libbz2-dev]
    - !Install [ libxmu-dev]
    - !Install [ libappstream-glib-dev]
    - !Install [ librsvg2-dev]

    - !Install [ mypaint-brushes]
    - !Install [ libmypaint-dev]

    # "atk" 
    - !Install [ libatk1.0-dev]
    # "cairo"
    - !Install [ libcairo2-dev]
    # ""
    - !Install [ libgdk-pixbuf2.0-dev]
    - !Install [ libgexiv2-dev]
    - !Install [ libgtk-3-dev]
    - !Install [ libpango1.0-dev]

  



  # build gimp using autotools
  gimpDev:
    setup:
    - !Container gimpDeps

    # gimp build calls link loader thus need path to built libraries (gegl and babl) installed to GIMP_PREFIX
    # Since Debian, suffix is the architecture
    # :${LD_LIBRARY_PATH}"
    - !Env  LD_LIBRARY_PATH: "/home/lib/x86_64-linux-gnu"
    - !Sh echo "library path is:"  $LD_LIBRARY_PATH

    # gimp build calls glib introspection thus need path to gir repositories
    # Here we cat our specific /home/share to the usual suspects
    - !Env  XDG_DATA_DIRS: "/home/share:/usr/local/share:/usr/share"
    - !Sh echo "introspection path is:"  $XDG_DATA_DIRS

    # build looks for executable gegl
    - !Sh echo $PATH
    # - !Env  PATH: "/home/bin:$PATH"
    - !Sh export PATH=/home/bin:$PATH
    - !Sh echo $PATH

    # require libtool now (for autotools build

    # build
    - !Sh |
        cd /home/gimp
        ./autogen.sh --disable-docs --disable-gtk-doc
        make
        make install



  # build gimp using meson
  gimpMesonDev:
    setup:
    - !Container gimpDeps

    # build
    - !Sh |
        cd /home/gimp
        meson _build \
         --prefix=${GIMP_PREFIX} \
         --buildtype=release \
         -Djavascript=never \
         -Dlua=never \
         -Dpython=always \
         -Dpoppler=false
        cd _build
        ninja
        ninja install



  # with package gimp-plugin-registry
  thirdPartyPlugins:
    setup:
    - !Container geglDev

    # Intall package of third party plugins (includes resynthesizer) packaged by distributor
    # See command listThirdParty; it installs .py to different place than build scripts
    - !Install [gimp-plugin-registry]

    # Define HOME.
    # Without this, HOME is /root
    # Gimp tries to write ~/.local/share (Gnome standard location for user data)
    # Avoids error: "/root/.local/share: read-only file system"
    environ:
      HOME: /work/.home


  # with resynthesizer plugin
  resynth:
    setup:
    - !Container geglDev

    # Not used: this works, but doesn't keep the repository (with test images)
    # Clone repository into temp directory and execute build script
    #- !GitInstall
    #  url: git://github.com/bootchk/resynthesizer
    #  script: ./autogen.sh && ./configure && make && make install

    # Clone repository
    - !Git
      url: git://github.com/bootchk/resynthesizer
      path: /home/resynthesizer

    # cd to repository and build it
    # Build script is a sequence of sh commands, "&&" means each depends on success of previous.
    # As documented in build instructions in resynthesizer/readme.md
    - !Sh cd /home/resynthesizer && ./autogen.sh && ./configure && make && make install

    


  
  # with a python script that invokes resynthesizer engine plugin
  resynthtest:
    setup:
    - !Container resynth
    
    # install python in container
    # Python is not needed to build resynthesizer, but is needed at runtime to run some plugins
    # !!! Ubuntu requires package gimp-python.  Package "python" will install but is not sufficient.
    - !Install [gimp-python]

    # Create file containing test program.
    # Language is python, calling pygimp (pdb object) functions
    # The test program only proves that the resynthesizer plugin is registered properly, not that it works.
    # Expect Python "TypeError: wrong number of parameters" and for gimp-console to hang ( you can Ctl-C it. )
    - !Text
      /home/resynthesizer/test.py: |
        from gimpfu import *
        # Use images from local resynthesizer repository clone
        # img = pdb.gimp_file_load("/home/resynthesizer/Test/in_images/brick.png", "/home/resynthesizer/Test/in_images/brick.png")
        # invoke resynthesizer plugin using its pdb registered name (but with improper parameters)
        pdb.plug_in_resynthesizer()
        pdb.gimp_quit(1)

    # Define HOME,
    # Without this HOME is /root
    # Gimp tries to write ~/.local/share (Gnome standard location for user data)
    # Avoids error: "/root/.local/share: read-only file system"
    environ:
      HOME: /work/.home
     
    




commands:
  testOS: !Command
    description: Test sanity of OS in container baseOS
    container: baseOS
    run: |
      which which
      which pkg-config
      python -V

  testMeson: !Command
    description: Test sanity of meson in container mesonBuild
    container: mesonBuild
    run: |
      meson -h
      which pkg-config
      which python3

  testSource: !Command
    description: List contents of cloned source
    container: gimpSource
    run: |
      echo "Contents of /babl"
      ls /home/babl
      which git


  testBabl: !Command
    description: Test build babl
    container: bablDev
    run: |
      ls /home/babl

  testGegl: !Command
    description: Test build gegl
    container: geglDev
    run: |
      meson -h

  gimpVersion: !Command
    description: Run gimp command line in gimpdev container
    container: gimpDev
    run: |
      gimp --version

  listResynth: !Command
    description: ls built and installed resynthesizer components in container resynth (test build process)
    container: resynth
    run: |
      # c executables
      ls -al /usr/lib/gimp/2.0/plug-ins/resy*
      # python scripts  (location unique to Ubuntu)
      ls -al /usr/local/lib/gimp/2.0/plug-ins

  listThirdParty: !Command
    description: ls installed resynthesizer components from distributor package "gimp-plugin-registry"
    container: thirdPartyPlugins
    run: |
      # c executables
      ls -al /usr/lib/gimp/2.0/plug-ins/resy*
      # python scripts  (location dictated by packaging)
      ls -al /usr/lib/gimp/2.0/plug-ins/*.py
      

  testResynth: !Command
    description: Test built resynthesizer plugin will start from gimp-console (but throws wrong parameters)
    container: resynthtest
    # invoke headless (no gui) gimp, using python interpreter, on a python script
    run: |
      gimp-console -idf --verbose --batch-interpreter python-fu-eval  -b - </home/resynthesizer/test.py




