
Attached is a diff (on the MR branch) that fixes the issue I described earlier.

The cause of the issue.
===

On the wire, a GStrv should be represented by:

    string-count [char-count [char]*]*

where * means zero or more.
Note that you must always write the string-count, even for an empty array, because the wire reader side expects it.
That is a problem with the original code in the MR, it doesn't always write the string-count to the wire

(It still baffles me why it was crashing when you enter "zz" (or any two chars) in the text box for Procedure Browser,
since that should return one procedure name, "script-fu-fuzzy-border", i.e. not an empty GStrv.)

How I am testing with the diff in place:
===

- Procedure Browser doesn't crash for "zz"

- a test plugin in Python receives a GStrv from a call to gimp-pdb-query, and it is correctly bound to a Python iterable
- a test plugin in Python can call a test PDB procedure that takes a GStrv, and it correcly crosses the wire.
- same, but passing an empty Python list (empty string array is received)
- same, but passing a Python list of empty strings (non-empty array of empty strings is received)

- a test ScriptFu plugin receives a GStrv from a call to gimp-pdb-query
- a test ScriptFu plugin can call a test PDB procedure that takes a GStrv, and it correcly crosses the wire.

All tests pass.

Which plugins use string arrays.
===

Only one GIMP PDB procedure takes a GStrv, file-gih-save (and it has unrelated issues that I will submit.)
Several GIMP PDB procedures return a GStrv, e.g. gimp-pdb-query.
In the wild, for third-parties, I don't know of any that used GimpStringArray.

Note that ScriptFu (and the old PythonFu) have no support (and never had?)
for declaring a plugin/PDB procedure taking an parameter of string array type (was GimpStringArray, now is GStrv.)
In other words there is no ScriptFu constant "SF_STRING_ARRAY" and no widget implemented by ScriptFu for entering same.
This is not an issue for plugins using GI, they can register procedures taking GStrv.

ScriptFu is able to call PDB procedures taking GStrv, and receive GStrv (as noted in the tests above.)
You just can't implement, in a ScriptFu script, a PDB procedure that takes a GStrv.

FYI
===

The Python for creating a GValue is:


    gvalue = GObject.Value (GObject.TYPE_STRV)
    gvalue.set_boxed(a_list)

OR

    gvalue = GObject.Value (GObject.TYPE_STRV, ["foo", "bar"])
