To summarize the status of this issue:

dbc19800 made it better: the binding works for scriptfu but not for python.  So we believe there is an issue in PyGObject.

Patches in #5984 and #5834 workaround for the two python plugins in the GIMP repository: openraster.py and colorxhtml.py

So this specific issue (calling a plugin runfunc) is no longer visible to users.
The specific issue remains open to document that there might be an issue in PyGObject.

The general issue is that for Python (PyGObject),
the binding for C language (int, array) passes both (e.g. n_drawables, drawables)
for the direction from GIMP to Python, whereas it should pass a native sequence.
In the other direction (from Python to GIMP) the binding takes a native sequence and passes (int, array) as it should.

It is not a high priority to fix this???
There are more cases where GIMP binds from GIMP to Python.
Namely, where ever a libgimp function returns an array.
Lua plugins will receive a native sequence (one parameter)
whereas Python plugins will receive an int (for the length of the sequence)
and the native sequence.

Only GIMP uses binding in the direction from GIMP to Python.
Plugins calling GIMP use binding in the other direction.

It is an inconsistency apparent to plugin authors who use two languages:
they will see that a signature from Python has an extra n_drawables
compared to say Lua.

It does not affect ScriptFu and the Scheme language,
since the ScriptFu interpreter does not use GI
but does its own binding, so to speak.
See line TODO in
In ScriptFu a call to PDB procedure gimp-context-list-paint-methods
which has PDB signature (int, StringArray) gimp-context-list-paint-methods (void)
returns one argument, a list, e.g. in Scheme
(gimp-context-list-paint-methods )   a function call with no args
returns only a list.


E.G. gimp-context-list-paint-methods returns num_strings, StringArray
