
2.99 scriptfu select widgets do not close when scriptfu main dialog closes

This behavior differs from 2.10.

To replicate:
   - open an indexed image
   - set colormap :  Colors>Map>Set colormap...
   - expect a scriptfu dialog
   - in the scriptfu main dialog, click on the "Palette" button
   - expect a "select"  dialog to appear
   - in the scriptfu main dialog, choose the "OK" button
   - expect the main dialog to close

Expect: the select dialog titled "Script-Fu Palette Selection " to close also

Actual: fails to close

The issue affects many select dialogs: [brush, palette, pattern, font, gradient].
Five files named libgimp/gimp*foo*select.c might be involved in ANY fix.

You can also test using plug-ins/script-fu/scripts/test-sphere.scm,
which exercises all the scriptfu widgets.
Filters>Development>ScriptFu>Test>Sphere...
You might need to install the plugin, a regular install does not.


Analysis:

I started to debug, but don't have a fix yet.

Commit 6e80a232 seems relevant.
It seems to have rearranged the logic.
Formerly, a call to
```
gimp_<foo>_close_popup(temp_callback);
```
came earlier.
Now it seems to come later, from a signal, possibly "destroy".

The issue does not print any warnings, but fails quietly.

From app/pdb/palette-select-cmds.c (generated by pdbgen) at about line 70,
I have harnessed, rearranged, and marked with >>>> where the first failure occurs:

```
static GimpValueArray *
palettes_close_popup_invoker (GimpProcedure         *procedure,
                              Gimp                  *gimp,
                              GimpContext           *context,
                              GimpProgress          *progress,
                              const GimpValueArray  *args,
                              GError               **error)
{
  gboolean success = TRUE;
  const gchar *palette_callback;

  palette_callback = g_value_get_string (gimp_value_array_index (args, 0));
  g_printerr("invoker called\n");

  if (success)
    {
      if (gimp->no_interface )
        {
        g_printerr("no interface\n");
        success = FALSE;
        }
      else if (! gimp_pdb_lookup_procedure (gimp->pdb, palette_callback) )
        {
>>>>> takes this path
          g_printerr("fail lookup palette_callback\n");
          success = FALSE;
        }
      else
        {
>>>>> this call was earlier in previous versions of the code
          g_printerr("calling gimp_pdb_dialog_close\n");
          success = gimp_pdb_dialog_close (gimp, gimp_data_factory_get_container (gimp->palette_factory),
                                   palette_callback);
      }
    }

  return gimp_procedure_get_return_values (procedure, success,
                                           error ? *error : NULL);
}
```

So my best guess is that a call that removes the temp PDB procedure in argument palette_callback
is now executed before the call to gimp_pdb_dialog_close(palette_callback).

If you insert a call to gimp_pdb_dialog_close() earlier in the call chain,
it alleviates the issue, but that is not a proper fix since then the call is duplicated.


Other:

Does not affect Python plugin that opens the same select dialog
because scriptfu is an extension and remains an executing process.
Whereas a Python plugin plugin terminates, which would close the select dialog.
The Python code could be trying to close the select dialog also and failing,
but you would not notice because the select dialog closes when the process terminates.

I found this while working on issues with scriptfu on MacOS,
but I think they are not related.




OLD:


Related:

May be related to #6630, #6578 which are about scriptfu hanging on MacOS

The code makes the select dialog transient on the main GIMP app window, on the progress bar.
That code seems to work on Linux, but may not work on MacOS (comments in the code,
and discussions on the gimpdev irc.)
So even if this issue is fixed for Linux, it might not fix all the symptoms in #6630,
That is, it might fix the issue that scriptfu seems to hang,
but it might not keep the select dialog from being obscured.

The select dialog is non-modal, the user can leave it open and still use the scriptfu main dialog.
So it is not a child of the button and would not close automatically when the button is destroyed.


Analysis:

The relevant first call, in plug-ins/script-fu/script-fu-interface.c.
called when script-fu is ending the execution of one script, in "script_fu_interface_quit."

```
for (i = 0; i < script->n_args; i++)
  switch (script->args[i].type)
    {
    case SF_FONT:
    case SF_PALETTE:
    case SF_PATTERN:
    case SF_GRADIENT:
    case SF_BRUSH:
    g_printerr("gimp_select_button_close_popup\n");
      gimp_select_button_close_popup
        (GIMP_SELECT_BUTTON (sf_interface->widgets[i]));
      break;
```

I harnessed libgimp/gimpselectbutton.c  :

```
void
gimp_select_button_close_popup (GimpSelectButton *button)
{
  g_printerr("In gimp_select_button_close_popup\n");
  g_return_if_fail (GIMP_IS_SELECT_BUTTON (button));
  g_printerr("is a select button\n");
  if (button->temp_callback)
    {
      g_printerr("is a temp_callback\n");
      GimpSelectButtonClass *klass = GIMP_SELECT_BUTTON_GET_CLASS (button);

      klass->select_destroy (button->temp_callback);

      button->temp_callback = NULL;
    }
}
```

The log from my harness code is:
```
Succeed  gimp_window_set_transient_for on progress
not a popup
not a popup
gimp_select_button_close_popup
In gimp_select_button_close_popup
is a select button
is a temp_callback
In gimp_select_button_close_popup
is a select button
In gimp_select_button_close_popup
is a select button
```

So gimp_select_button_close_popup is called three times (which is strange.)
