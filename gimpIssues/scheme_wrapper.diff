diff --git a/plug-ins/script-fu/scheme-wrapper.c b/plug-ins/script-fu/scheme-wrapper.c
index dd8992cf29..58cd05c13f 100644
--- a/plug-ins/script-fu/scheme-wrapper.c
+++ b/plug-ins/script-fu/scheme-wrapper.c
@@ -511,6 +511,148 @@ convert_string (gchar *str)
     }
 }
 
+/*
+ * From ID in script, return a drawable.
+ * Returns NULL if error in script or ID invalid
+ */
+static GimpDrawable *
+get_drawable_from_script(scheme   *sc,
+                         pointer   a)
+{
+
+  if (sc->vptr->is_number (sc->vptr->pair_car (a))) {
+    GimpDrawable *drawable =
+      gimp_drawable_get_by_id (sc->vptr->ivalue (sc->vptr->pair_car (a)));
+    #if DEBUG_MARSHALL
+        g_printerr ("      drawable arg is '%d'\n",
+                    gimp_item_get_id (GIMP_ITEM (drawable)));
+    #endif
+    // drawable could be NULL
+    return drawable;
+  }
+  else return NULL;
+}
+
+
+/* Marshal single drawable from script into a GValue */
+static gint
+marshal_drawable_to_gvalue (scheme   *sc,
+                         pointer   a,
+                         GValue   *value)
+{
+  GimpDrawable *drawable = get_drawable_from_script(sc, a);
+  if (drawable)
+    {
+      // TODO this should/could be g_value_take_object ??
+      g_value_set_object (value, drawable);
+      return TRUE;
+    }
+  else return FALSE;
+}
+
+
+/* Marshal single drawable from script
+ * into a GValue holding GimpObjectArray holding the drawable
+ *
+ * multi-layer: formerly some PDB  procedures take a single drawable, now take array of drawable
+ *
+ * !!! This only fixes case where a script calls PDB procedures that formerly took a single instance of type Drawable.
+ * Since use of GimpObjectArray is recent change, there aren't any scripts for other cases.
+ * Any future scripts that call procedures taking a GimpObjectArray of objects not drawables, will fail.
+ * FIXME More generally, from paramspec, get array's element type other than GimpDrawable
+ *
+ * FIXME Let script author pass list of drawables, and pass length of list to set_object_array
+ */
+static gint
+marshal_drawable_to_object_array_in_gvalue (scheme   *sc,
+                         pointer   a,
+                         GValue   *value)
+{
+  // FUTURE get type of elements in the array
+  //GType element_type = arg_spec->value_type;  // object_type;  // type of array elements?
+  //g_printf("Element type %s\n", g_type_name(element_type));
+
+  GimpDrawable *drawable = get_drawable_from_script(sc, a);
+  if (drawable)
+    {
+      // Pass address of local var drawable as array (of length 1) i.e. GObject**
+      // gimp_value_set_object_array will copy the reference, not the pointed to object
+      // Again, more generally, the type and length parameters would not be constants here.
+      gimp_value_set_object_array (value, GIMP_TYPE_LAYER, (GObject**)&drawable, 1);
+      return TRUE;
+    }
+  else return FALSE;
+}
+
+
+/* Marshal single path from script into a GValue holding type GFile */
+static gint
+marshal_path_to_gvalue (scheme   *sc,
+                         pointer   a,
+                         GValue   *value)
+{
+  gint success;
+
+  if (! sc->vptr->is_string (sc->vptr->pair_car (a)))
+    success = FALSE;
+  else
+    {
+      GFile *gfile =
+        g_file_new_for_path (sc->vptr->string_value (sc->vptr->pair_car (a)));
+
+      g_value_set_object (value, gfile);
+      success = TRUE;
+    #if DEBUG_MARSHALL
+        g_printerr ("      gfile arg is '%s'\n",
+                    g_file_get_parse_name (gfile));
+    #endif
+    }
+  return success;
+}
+
+
+static pointer
+marshal_object_array_to_vector_return_value(scheme   *sc,
+                                            GValue   *value)
+{
+  /* Before v3.0, PDB procedure's return type was say INT32ARRAY,
+  * preceded by a type INT32 designating array length.
+  * Now return type is GimpObjectArray preceded by length.
+  *
+  * Existing scheme plugins usually expect two return values: len, vector
+  * but it is more object-oriented to use scheme (vector-length vector)
+  * when you need length of the vector marshalled from GimpObjectArray.
+  */
+  GObject **object_array;
+  gint32    n;
+  pointer   vector;
+  int j;
+
+  object_array = gimp_value_get_object_array (value);
+  // array knows own length, ignore length in preceding return value
+  n = ((GimpObjectArray*)g_value_get_boxed(value))->length;
+  vector = sc->vptr->mk_vector (sc, n);
+
+  // marshall array of objects into scheme vector of object ID's
+  // Note iterate starting at the back of the array, and prefix to vector
+  // so the order of objects is not changed.
+  for (j = n - 1; j >= 0; j--)
+    {
+      GObject *object = object_array[j];
+      gint     id     = -1;
+
+      // Allow any object to be null, represent by -1 in the vector
+      if (object)
+        g_object_get (object, "id", &id, NULL); // get property "id"
+
+      sc->vptr->set_vector_elem (vector, j,
+                                 sc->vptr->mk_integer (sc, id));
+    }
+  // ensure vector len equals object array len and all elements are ID's or -1
+  return vector;
+}
+
+
 /* This is called by the Scheme interpreter to allow calls to GIMP functions */
 static pointer
 script_fu_marshal_procedure_call (scheme   *sc,
@@ -580,6 +722,7 @@ script_fu_marshal_procedure_call (scheme   *sc,
       return foreign_error (sc, error_str, 0);
     }
 
+  /* Get the formal args to the called PDB procedure ( ParamSpecs) */
   arg_specs = gimp_procedure_get_arguments (procedure, &n_arg_specs);
 
   /*  Check the supplied number of arguments  */
@@ -588,7 +731,7 @@ script_fu_marshal_procedure_call (scheme   *sc,
     {
 #if DEBUG_MARSHALL
       g_printerr ("  Invalid number of arguments (expected %d but received %d)",
-                  nparams, (sc->vptr->list_length (sc, a) - 1));
+                  n_arg_specs, (sc->vptr->list_length (sc, a) - 1));
 #endif
       g_snprintf (error_str, sizeof (error_str),
                   "Invalid number of arguments for %s (expected %d but received %d)",
@@ -626,6 +769,7 @@ script_fu_marshal_procedure_call (scheme   *sc,
 #endif
 
       g_value_init (&value, G_PARAM_SPEC_VALUE_TYPE (arg_spec));
+      // now the gvalue knows the formal type of the thing it will hold
 
       if (G_VALUE_HOLDS_INT (&value))
         {
@@ -812,20 +956,7 @@ script_fu_marshal_procedure_call (scheme   *sc,
         }
       else if (GIMP_VALUE_HOLDS_DRAWABLE (&value))
         {
-          if (! sc->vptr->is_number (sc->vptr->pair_car (a)))
-            success = FALSE;
-
-          if (success)
-            {
-              GimpDrawable *drawable =
-                gimp_drawable_get_by_id (sc->vptr->ivalue (sc->vptr->pair_car (a)));
-
-              g_value_set_object (&value, drawable);
-#if DEBUG_MARSHALL
-              g_printerr ("      drawable arg is '%d'\n",
-                          gimp_item_get_id (GIMP_ITEM (drawable)));
-#endif
-            }
+          success = marshal_drawable_to_gvalue(sc, a, &value);
         }
       else if (GIMP_VALUE_HOLDS_VECTORS (&value))
         {
@@ -1348,6 +1479,19 @@ script_fu_marshal_procedure_call (scheme   *sc,
               g_value_set_boxed (&value, &parasite);
             }
         }
+      else if (GIMP_VALUE_HOLDS_OBJECT_ARRAY (&value))
+        {
+          success = marshal_drawable_to_object_array_in_gvalue(sc, a, &value);
+        }
+      else if (g_strcmp0(g_type_name (G_VALUE_TYPE (&value)), "GFile") == 0)
+        {
+          /* Assert G_VALUE_HOLDS_OBJECT(&value)
+           * Macros not defined: GIMP_VALUE_HOLDS_GFILE nor G_VALUE_HOLDS_GFILE
+           * G_VALUE_HOLDS (value, GFile) fails to compile since not GFile is-a Gtype.
+           * Thus we resort to string equality.
+           */
+          success = marshal_path_to_gvalue(sc, a, &value);
+        }
       else if (G_VALUE_TYPE (&value) == GIMP_TYPE_PDB_STATUS_TYPE)
         {
           return foreign_error (sc,
@@ -1466,6 +1610,10 @@ script_fu_marshal_procedure_call (scheme   *sc,
 #endif
       for (i = gimp_value_array_length (values) - 2; i >= 0; --i)
         {
+          /* We are iterating backwards through the value array.
+          * 'value' is the current iterated return value at values[i+1],
+          * and 'values[i]' is preceding return value.
+           */
           GValue *value = gimp_value_array_index (values, i + 1);
           gint    j;
 
@@ -1706,6 +1854,11 @@ script_fu_marshal_procedure_call (scheme   *sc,
 #endif
                 }
             }
+          else if (GIMP_VALUE_HOLDS_OBJECT_ARRAY (value))
+            {
+              pointer vector = marshal_object_array_to_vector_return_value(sc, value);
+              return_val = sc->vptr->cons (sc, vector, return_val);
+            }
           else if (G_VALUE_TYPE (&value) == GIMP_TYPE_PDB_STATUS_TYPE)
             {
               return foreign_error (sc, "Procedure execution returned multiple status values", 0);
