2.99 PDB procedure file-psd-save throws

Replicate:

First setup the environment vars so that CRITICAL messages are printed.
In a plugin, invoke gimp-psd-save, passing a filename, say "tempfoo"

Expect:

console free of error messages

Actual:

In the console

/usr/local/lib/x86_64-linux-gnu/gimp/2.99/plug-ins/file-psd/file-psd: CRITICAL: g_file_get_path: assertion 'G_IS_FILE (file)' failed

If you have set up GIMP_PLUGIN_DEBUG so that CRITICAL engenders a backtrace, you get this trace:

```
#2  0x00007f1f1d31d196 in gimp_fatal_func (log_domain=0x7f1f1ce576ff "GLib-GIO", flags=G_LOG_LEVEL_CRITICAL, message=0x556d921a1970 "g_file_get_path: assertion 'G_IS_FILE (file)' failed", data=0x0) at ../libgimp/gimp.c:1023
        sigset = {__val = {0 <repeats 16 times>}}
        level = 0x7f1f1d35e4af "CRITICAL"
#3  0x00007f1f1d17139c in g_logv () at /lib/x86_64-linux-gnu/libglib-2.0.so.0
#4  0x00007f1f1d171583 in g_log () at /lib/x86_64-linux-gnu/libglib-2.0.so.0
#5  0x00007f1f1cd6bc5a in g_file_get_path () at /lib/x86_64-linux-gnu/libgio-2.0.so.0
#6  0x0000556d9107f8ce in save_resources (fd=0x556d921dc420, image=0x556d9210f100) at ../plug-ins/file-psd/psd-save.c:624
        iter = Python Exception <class 'gdb.MemoryError'> Cannot access memory at address 0x782f62696c2f6c61:
#7  0x0000556d91082713 in save_image (file=0x556d92114600, image=0x556d9210f100, error=0x7ffe67645e88) at ../plug-ins/file-psd/psd-save.c:1764
        filename = 0x556d921e2800 "\020\211\033\222mU"
        fd = 0x556d921dc420
        buffer = 0x556d9219e1c0
        iter = 0x0
#8  0x0000556d91085a27 in psd_save (procedure=0x556d9211c1d0, run_mode=GIMP_RUN_NONINTERACTIVE, image=0x556d9210f100, n_drawables=1, drawables=0x556d920e6770, file=0x556d92114600, args=0x556d92114680, run_data=0x0) at ../plug-ins/file-psd/psd.c:377
        status = GIMP_PDB_SUCCESS
        metadata = 0x0
        metadata_flags = 4294967263
        export = GIMP_EXPORT_IGNORE
        error = 0x0
#9  0x00007f1f1d3340f1 in gimp_save_procedure_run (procedure=0x556d9211c1d0, args=0x556d92114240) at ../libgimp/gimpsaveprocedure.
```

It does not seem to happen when invoked from the GUI.
It does appear to succeed in that a file is created.


Analysis:

Probably not important, just an annoyance.

In psd-save.c line 624

```
fileName = g_file_get_path (gimp_image_get_file (image));
IFDBG printf ("\tImage title: %s\n", fileName);
```

Not important in this case because this appears to be debugging code, since fileName is not used subsequently.

But this construct appears a few more times in other code, several plugins (grep -r "gimp_image_get_file" *)

Docs for gimp_image_get_file() says it returns a GFile or NULL.
In this case (a new image) it returns NULL and probably  g_file_get_path() throws this CRITICAL message when receiving NULL,
yet probably also returns an empty string which is sufficient for continued execution.

Maybe the docs for gimp_image_get_file() should say "returns GFile *", a pointer, not a struct.
i.e. the annotation should be corrected.
Does it create a GFile on the heap and return a pointer, or just return a GFile?
When this function was returning a string, it made sense to return a NULL string.
Since it was changed to return a GFile,
should it still return a null pointer, or should it return a pointer to a GFile that is empty in some sense?
