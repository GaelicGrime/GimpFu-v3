
Porting PyGimp Plugins to Gimp 3 and Python 3


About

This document is for authors of Gimp plugin who want to use GimpFu.
When this document says "you" or "author" it means the person writing
a plugin for Gimp using the Python language and importing the gimpfu package.

It describes the changes you must make to plugin source
so the plugin will run in Gimp 3.

This is for plugins written in Python using PyGimp.
In other words, if you import any of these modules:
   - gimpfu
   - gimp
   - gimpenums



Changes required by Python 3
----------------------------

All plugins in Gimp 3 run under Python 3.
In some cases, Python 3 does not accept syntax that worked in Python 2.
In such cases, you must change your code.
See elsewhere for a guide to porting Python 2 code to Python 3.

Briefly, if your plugin throws an exception at run time,
and the errant line of code does not appear to involve Gimp objects,
you should suspect that you need to make changes.

Syntax
======

Python3 syntax changed for a few language constructs.

Examples:

    except ValueError, e:    =>      except ValueError as e:


Standard module API
===================

Some standard modules changed API from Python 2 to Python 3

Examples:
    import gettext  # standard module
    gettext.install("gimp20-python", gimp.locale_directory, unicode=True) =>
         gettext.install("gimp20-python", gimp.locale_directory)



Obsolete PyGimp Modules
-----------------------

Some modules are obsolete in PyGimp 3 :
    gimpshelf
    gimpui
    gimpcolor (TODO ???)



gimpshelf
=========

The gimpshelf module was primarily used to persist plugin settings
within a Gimp session
(so that the values appearing in a plugin dialog were persistent,
and so that "Filter>Re Run <Foo>" executed the plugin with last values.)

1) Plugins using the gimpfu module.

The gimpfu module will continue to persist settings
(just not using gimpshelf module anymore.)

2) Plugins that did not use the gimpfu module
and used gimpshelf to persist plugin settings.

You will need to recode to use GI to the new Gimp mechanism for persisting plugin settings.
See example code in a PyGimp plugin that has already been ported to Gimp 3.
For example see gimp/plugins/goat-exercises/goat-exercise-py3.py
(TODO does it persist settings?)
(TODO that is not PyGimp)

2) In a few cases, you might have used gimpshelf module for other purposes.

You will need to use GI as above, or find some other mechanism for persisting.


gimpui
======

The gimpui module was primarily used when a plugin implemented its own GUI,
and needed GTK widgets provided by Gimp (in libgimpui), such as a color picker widget.

You will need to recode to use GI to the Gimp objects that implement GUI,
for example Gimp.TODO



Gimp model Changes
------------------

The model of Channel in Gimp v3 is expanded from v2.

Some procedures, like gimp-threshold have been replaced (gimp-drawable-threshold)
 and require a new "channel" parameter.

?????


Gimp Menu Path Names
--------------------

A plugin declares a MenuItem name and a MenuPath name

Gimp says:
<Image>", "<Layers>", "<Channels>", "<Vectors>", "<Colormap>", "<Brushes>",
"<Dynamics>", "<MyPaintBrushes>", "<Gradients>", "<Palettes>", "<Patterns>", "<ToolPresets>", "<Fonts>" or "<Buffers>"

But <Filters> also works.  And <Filters/Foo>

Note that e.g. Layers is not the "Layer" menu in the menubar, but the popup menu in Gimp's "Layers" dockable dialog.
Use RMB to popup the menu.


Enums
-----

GimpFu v2 and v3 define enums to be used with Gimp.
They are all caps, e.g. FILL_TRANSPARENT.

Their spelling does not always correspond to the spelling used in the Gimp API.
For example, Gimp defines BACKGROUND but GimpFu defines BACKGROUND_FILL.
New code should use the Gimp enums instead of the enums defined by GimpFu.
For example, use Gimp.FillType.BACKGROUND.

GimpFu v2 defined deprectated enums TRUE and FALSE for use with Gimp.
GimpFu v3 does not, they are obsolete, use True and False instead.

A few enums defined by GimpFu v2 are still defined by v3, but only for backward compatibility,
that is they are deprecated and new code should not use them.
E.g. Instead of BG_BUCKET_FILL, use BACKROUND_FILL


PDB
---

In v2, PDB procedures often accepted -1 for optional parameters,
and Python authors could use None for the parameter.

GimpFu v3 still supports that.
Use of -1 is deprecated, meaning not recommended for new code.
Use None instead.

PDB procedure docs say to use NULL for optional parameters, but that is for the C language.
In Python, use None.


GimpFu packaging
----------------

How GimpFu is packaged is irrelevant to most authors,
but some authors, may want to know to aid in their debugging.

In v2, gimpfu was many .py files in the same directory, each file a Python module.

In v3, GimpFu is a package, a directory with a __init__.py file, and submodules.
The top directory is in PYTHONPATH when Gimp runs a plugin.

You can import a specific submodule using absolute paths like:
from gui.dialog import *
This refers to .../plug-ins/gimpfu/gui/dialog.py


Miscellaneous changes
---------------------

The image parameter to a plugin is not wrapped.
For example, it is usually named "timg"
TODO this was fixed.


TODO this was fixed
The attributes of Gimpfu objects cannot be accessed using property notation.
timg.width => timg.width()



TODO maybe this can change

The pdb object cannot be accessed using index notation:
pdb['gimp-edit-fill']()    =>    pdb.gimp-edit-fill()


Certain constants are deprecated:
FILL_TRANSPARENT => TRANSPARENT_FILL



Rewriting a plugin without PyGimp
---------------------------------

It is possible to rewrite a plugin without using PyGimp at all.

For example, see TODO
