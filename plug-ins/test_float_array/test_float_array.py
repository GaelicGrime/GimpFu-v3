#!/usr/bin/env python3


import gi
gi.require_version('Gimp', '3.0')
from gi.repository import Gimp
from gi.repository import GObject
from gi.repository import GLib
from gi.repository import Gio
import time
import sys


import gettext
_ = gettext.gettext
def N_(message): return message


def foo(procedure, run_mode, image, drawable, args, data):

    # the foo you want to test
    args = Gimp.ValueArray.new(4)
    args.insert(0, GObject.Value(Gimp.RunMode, Gimp.RunMode.NONINTERACTIVE))
    args.insert(1, GObject.Value(Gimp.Drawable.__gtype__, drawable))
    args.insert(2, GObject.Value(GObject.TYPE_INT, 4))

    # There is no GObject.TYPE_ARRAY
    #args.insert(3, GObject.Value(GObject.TYPE_ARRAY, (100.0, 100.0, 100.0, 100.0)))
    # args.insert(3, GObject.Value(Gimp.FloatArray.__gtype__, (100.0, 100.0, 100.0, 100.0)))

    # Use method for new GimpFloatArray from a GArray generated by PyGObject
    # gfa = Gimp.gimp_float_array_from_garray((100.0, 100.0, 100.0, 100.0))
    gfa = Gimp.FloatArray((100.0, 100.0, 100.0, 100.0), 4)
    args.insert(3, GObject.Value(Gimp.FloatArray.__gtype__, gfa))

    img = Gimp.get_pdb().run_procedure('gimp-pencil', args)

    # Gimpfu equivalent:
    #Gimp.get_pdb().gimp_pencil(drawable, 4, (100.0, 100.0, 100.0, 100.0))

    return procedure.new_return_values(Gimp.PDBStatusType.SUCCESS, GLib.Error())


class Foo (Gimp.PlugIn):
    ## Parameters ##

    ## GimpPlugIn virtual methods ##
    def do_query_procedures(self):
        self.set_translation_domain("gimp30-python",
                                    Gio.file_new_for_path(Gimp.locale_directory()))

        return [ 'python-fu-foo' ]  # Return procedure name, elsewhere this is "name"

    def do_create_procedure(self, name):
        procedure = Gimp.ImageProcedure.new(self, name,
                                            Gimp.PDBProcType.PLUGIN,
                                            foo, None)
        procedure.set_image_types("*");
        procedure.set_documentation (N_("Test foo"),
                                     "Tests Gimp/PyGObject implementation of conversions.",
                                     name)
        procedure.set_menu_label(N_("_Test foo"))
        procedure.set_attribution("Konneker",
                                  "Konneker",
                                  "2020")
        procedure.add_menu_path ("<Image>/Filters/Test")
        return procedure

Gimp.main(Foo.__gtype__, sys.argv)
